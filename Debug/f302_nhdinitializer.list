
f302_nhdinitializer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ebc  08004ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ebc  08004ebc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ebc  08004ebc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  2000000c  08004ed0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08004ed0  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c196  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef1  00000000  00000000  0004c1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0004f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00050398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d70a  00000000  00000000  000514c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011538  00000000  00000000  0006ebca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1ba6  00000000  00000000  00080102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131ca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e64  00000000  00000000  00131cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004570 	.word	0x08004570

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004570 	.word	0x08004570

080001c8 <u8x8_stm32_gpio_and_delay>:

}

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	460b      	mov	r3, r1
 80001d4:	72fb      	strb	r3, [r7, #11]
 80001d6:	4613      	mov	r3, r2
 80001d8:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001da:	7afb      	ldrb	r3, [r7, #11]
 80001dc:	3b28      	subs	r3, #40	; 0x28
 80001de:	2b23      	cmp	r3, #35	; 0x23
 80001e0:	d863      	bhi.n	80002aa <u8x8_stm32_gpio_and_delay+0xe2>
 80001e2:	a201      	add	r2, pc, #4	; (adr r2, 80001e8 <u8x8_stm32_gpio_and_delay+0x20>)
 80001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e8:	08000279 	.word	0x08000279
 80001ec:	08000281 	.word	0x08000281
 80001f0:	080002ab 	.word	0x080002ab
 80001f4:	080002ab 	.word	0x080002ab
 80001f8:	080002ab 	.word	0x080002ab
 80001fc:	080002ab 	.word	0x080002ab
 8000200:	080002ab 	.word	0x080002ab
 8000204:	080002ab 	.word	0x080002ab
 8000208:	080002ab 	.word	0x080002ab
 800020c:	080002ab 	.word	0x080002ab
 8000210:	080002ab 	.word	0x080002ab
 8000214:	080002ab 	.word	0x080002ab
 8000218:	080002ab 	.word	0x080002ab
 800021c:	080002ab 	.word	0x080002ab
 8000220:	080002ab 	.word	0x080002ab
 8000224:	080002ab 	.word	0x080002ab
 8000228:	080002ab 	.word	0x080002ab
 800022c:	080002ab 	.word	0x080002ab
 8000230:	080002ab 	.word	0x080002ab
 8000234:	080002ab 	.word	0x080002ab
 8000238:	080002ab 	.word	0x080002ab
 800023c:	080002ab 	.word	0x080002ab
 8000240:	080002ab 	.word	0x080002ab
 8000244:	080002ab 	.word	0x080002ab
 8000248:	080002ab 	.word	0x080002ab
 800024c:	080002ab 	.word	0x080002ab
 8000250:	080002ab 	.word	0x080002ab
 8000254:	080002ab 	.word	0x080002ab
 8000258:	080002ab 	.word	0x080002ab
 800025c:	080002ab 	.word	0x080002ab
 8000260:	080002ab 	.word	0x080002ab
 8000264:	080002ab 	.word	0x080002ab
 8000268:	080002ab 	.word	0x080002ab
 800026c:	0800028b 	.word	0x0800028b
 8000270:	080002ab 	.word	0x080002ab
 8000274:	0800029b 	.word	0x0800029b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 8000278:	2001      	movs	r0, #1
 800027a:	f002 f8db 	bl	8002434 <HAL_Delay>
		break;
 800027e:	e014      	b.n	80002aa <u8x8_stm32_gpio_and_delay+0xe2>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000280:	7abb      	ldrb	r3, [r7, #10]
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f8d6 	bl	8002434 <HAL_Delay>
		break;
 8000288:	e00f      	b.n	80002aa <u8x8_stm32_gpio_and_delay+0xe2>
	case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
 800028a:	7abb      	ldrb	r3, [r7, #10]
 800028c:	461a      	mov	r2, r3
 800028e:	2110      	movs	r1, #16
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f002 fb52 	bl	800293c <HAL_GPIO_WritePin>
		break;
 8000298:	e007      	b.n	80002aa <u8x8_stm32_gpio_and_delay+0xe2>
	case U8X8_MSG_GPIO_DC:
		break;
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(SPI1_RES_GPIO_Port, SPI1_RES_Pin, arg_int);
 800029a:	7abb      	ldrb	r3, [r7, #10]
 800029c:	461a      	mov	r2, r3
 800029e:	2108      	movs	r1, #8
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f002 fb4a 	bl	800293c <HAL_GPIO_WritePin>
		break;
 80002a8:	bf00      	nop
	}
	return 1;
 80002aa:	2301      	movs	r3, #1
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <u8x8_byte_3wire_hw_spi>:

uint8_t u8x8_byte_3wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	460b      	mov	r3, r1
 80002c0:	72fb      	strb	r3, [r7, #11]
 80002c2:	4613      	mov	r3, r2
 80002c4:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80002c6:	7afb      	ldrb	r3, [r7, #11]
 80002c8:	3b14      	subs	r3, #20
 80002ca:	2b0c      	cmp	r3, #12
 80002cc:	d849      	bhi.n	8000362 <u8x8_byte_3wire_hw_spi+0xae>
 80002ce:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <u8x8_byte_3wire_hw_spi+0x20>)
 80002d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d4:	0800031b 	.word	0x0800031b
 80002d8:	08000363 	.word	0x08000363
 80002dc:	08000363 	.word	0x08000363
 80002e0:	08000309 	.word	0x08000309
 80002e4:	0800033b 	.word	0x0800033b
 80002e8:	0800034f 	.word	0x0800034f
 80002ec:	08000363 	.word	0x08000363
 80002f0:	08000363 	.word	0x08000363
 80002f4:	08000363 	.word	0x08000363
 80002f8:	08000363 	.word	0x08000363
 80002fc:	08000363 	.word	0x08000363
 8000300:	08000363 	.word	0x08000363
 8000304:	0800032b 	.word	0x0800032b
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000308:	7abb      	ldrb	r3, [r7, #10]
 800030a:	b29a      	uxth	r2, r3
 800030c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	4817      	ldr	r0, [pc, #92]	; (8000370 <u8x8_byte_3wire_hw_spi+0xbc>)
 8000314:	f003 fe2d 	bl	8003f72 <HAL_SPI_Transmit>
		break;
 8000318:	e025      	b.n	8000366 <u8x8_byte_3wire_hw_spi+0xb2>
	case U8X8_MSG_BYTE_INIT:
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
 800031a:	7abb      	ldrb	r3, [r7, #10]
 800031c:	461a      	mov	r2, r3
 800031e:	2110      	movs	r1, #16
 8000320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000324:	f002 fb0a 	bl	800293c <HAL_GPIO_WritePin>
		break;
 8000328:	e01d      	b.n	8000366 <u8x8_byte_3wire_hw_spi+0xb2>
	case U8X8_MSG_BYTE_SET_DC:
		u8x8_gpio_SetDC(&u8x8, arg_int);
 800032a:	7aba      	ldrb	r2, [r7, #10]
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	214a      	movs	r1, #74	; 0x4a
 8000332:	4618      	mov	r0, r3
 8000334:	f001 ff7f 	bl	8002236 <u8x8_gpio_call>
		break;
 8000338:	e015      	b.n	8000366 <u8x8_byte_3wire_hw_spi+0xb2>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(&u8x8, u8x8->display_info->chip_enable_level);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	781a      	ldrb	r2, [r3, #0]
 8000340:	f107 030c 	add.w	r3, r7, #12
 8000344:	2149      	movs	r1, #73	; 0x49
 8000346:	4618      	mov	r0, r3
 8000348:	f001 ff75 	bl	8002236 <u8x8_gpio_call>
		//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
		break;
 800034c:	e00b      	b.n	8000366 <u8x8_byte_3wire_hw_spi+0xb2>
	case U8X8_MSG_BYTE_END_TRANSFER:
		u8x8_gpio_SetCS(&u8x8, u8x8->display_info->chip_disable_level);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	785a      	ldrb	r2, [r3, #1]
 8000354:	f107 030c 	add.w	r3, r7, #12
 8000358:	2149      	movs	r1, #73	; 0x49
 800035a:	4618      	mov	r0, r3
 800035c:	f001 ff6b 	bl	8002236 <u8x8_gpio_call>
		//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
		break;
 8000360:	e001      	b.n	8000366 <u8x8_byte_3wire_hw_spi+0xb2>
	default:
		return 0;
 8000362:	2300      	movs	r3, #0
 8000364:	e000      	b.n	8000368 <u8x8_byte_3wire_hw_spi+0xb4>
	}
	return 1;
 8000366:	2301      	movs	r3, #1
}
 8000368:	4618      	mov	r0, r3
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000bc 	.word	0x200000bc

08000374 <start_app>:
void start_app(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
//	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, OPTIMAL_BL);
	u8g2_Setup_ssd1322_nhd_256x64_f(&u8g2, U8G2_R2, u8x8_byte_3wire_hw_spi, u8x8_stm32_gpio_and_delay);
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <start_app+0x78>)
 800037a:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <start_app+0x7c>)
 800037c:	491d      	ldr	r1, [pc, #116]	; (80003f4 <start_app+0x80>)
 800037e:	481e      	ldr	r0, [pc, #120]	; (80003f8 <start_app+0x84>)
 8000380:	f000 fa78 	bl	8000874 <u8g2_Setup_ssd1322_nhd_256x64_f>

	u8g2_InitDisplay(&u8g2);
 8000384:	481c      	ldr	r0, [pc, #112]	; (80003f8 <start_app+0x84>)
 8000386:	f001 ff27 	bl	80021d8 <u8x8_InitDisplay>
	u8g2_InitDisplay(&u8g2);
 800038a:	481b      	ldr	r0, [pc, #108]	; (80003f8 <start_app+0x84>)
 800038c:	f001 ff24 	bl	80021d8 <u8x8_InitDisplay>
	u8g2_InitDisplay(&u8g2);
 8000390:	4819      	ldr	r0, [pc, #100]	; (80003f8 <start_app+0x84>)
 8000392:	f001 ff21 	bl	80021d8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8000396:	2100      	movs	r1, #0
 8000398:	4817      	ldr	r0, [pc, #92]	; (80003f8 <start_app+0x84>)
 800039a:	f001 ff2c 	bl	80021f6 <u8x8_SetPowerSave>
	u8g2_SetPowerSave(&u8g2, 0);
 800039e:	2100      	movs	r1, #0
 80003a0:	4815      	ldr	r0, [pc, #84]	; (80003f8 <start_app+0x84>)
 80003a2:	f001 ff28 	bl	80021f6 <u8x8_SetPowerSave>
	u8g2_SetPowerSave(&u8g2, 0);
 80003a6:	2100      	movs	r1, #0
 80003a8:	4813      	ldr	r0, [pc, #76]	; (80003f8 <start_app+0x84>)
 80003aa:	f001 ff24 	bl	80021f6 <u8x8_SetPowerSave>
	//set_contrast(OPTIMAL_CONTRAST);

	u8g2_SetBitmapMode(&u8g2,0);
 80003ae:	2100      	movs	r1, #0
 80003b0:	4811      	ldr	r0, [pc, #68]	; (80003f8 <start_app+0x84>)
 80003b2:	f000 f9db 	bl	800076c <u8g2_SetBitmapMode>


	u8g2_SetDrawColor(&u8g2, 1);
 80003b6:	2101      	movs	r1, #1
 80003b8:	480f      	ldr	r0, [pc, #60]	; (80003f8 <start_app+0x84>)
 80003ba:	f001 f951 	bl	8001660 <u8g2_SetDrawColor>
	u8g2_SetFontMode(&u8g2, 0);
 80003be:	2100      	movs	r1, #0
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <start_app+0x84>)
 80003c2:	f000 feb6 	bl	8001132 <u8g2_SetFontMode>
	u8g2_SetFontPosTop(&u8g2);
 80003c6:	480c      	ldr	r0, [pc, #48]	; (80003f8 <start_app+0x84>)
 80003c8:	f001 f826 	bl	8001418 <u8g2_SetFontPosTop>
		f	The font includes up to 256 glyphs.
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 80003cc:	490b      	ldr	r1, [pc, #44]	; (80003fc <start_app+0x88>)
 80003ce:	480a      	ldr	r0, [pc, #40]	; (80003f8 <start_app+0x84>)
 80003d0:	f001 f832 	bl	8001438 <u8g2_SetFont>
		//u8g2_SetFont(&u8g2, viafont);
		u8g2_DrawStr(&u8g2, 15, 15, "Hello World!");
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <start_app+0x8c>)
 80003d6:	220f      	movs	r2, #15
 80003d8:	210f      	movs	r1, #15
 80003da:	4807      	ldr	r0, [pc, #28]	; (80003f8 <start_app+0x84>)
 80003dc:	f000 ff68 	bl	80012b0 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <start_app+0x84>)
 80003e2:	f000 fa28 	bl	8000836 <u8g2_SendBuffer>
		//disp_splash();


}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	080001c9 	.word	0x080001c9
 80003f0:	080002b5 	.word	0x080002b5
 80003f4:	08004dfc 	.word	0x08004dfc
 80003f8:	20000028 	.word	0x20000028
 80003fc:	080045a8 	.word	0x080045a8
 8000400:	08004588 	.word	0x08004588

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000408:	f001 ffae 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040c:	f000 f808 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000410:	f000 f890 	bl	8000534 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000414:	f000 f850 	bl	80004b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//	HAL_TIM_PWM_Init(&htim2);
//	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
	start_app();
 8000418:	f7ff ffac 	bl	8000374 <start_app>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800041c:	bf30      	wfi
 800041e:	e7fd      	b.n	800041c <main+0x18>

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b090      	sub	sp, #64	; 0x40
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f004 f896 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800044c:	2301      	movs	r3, #1
 800044e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000454:	2302      	movs	r3, #2
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	4618      	mov	r0, r3
 800046a:	f002 fa7f 	bl	800296c <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000474:	f000 f8d2 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	230f      	movs	r3, #15
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2102      	movs	r1, #2
 8000492:	4618      	mov	r0, r3
 8000494:	f003 faa8 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049e:	f000 f8bd 	bl	800061c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80004a8:	2000      	movs	r0, #0
 80004aa:	f003 fc19 	bl	8003ce0 <HAL_RCC_MCOConfig>
}
 80004ae:	bf00      	nop
 80004b0:	3740      	adds	r7, #64	; 0x40
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_SPI1_Init+0x74>)
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <MX_SPI1_Init+0x78>)
 80004c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_SPI1_Init+0x74>)
 80004c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_SPI1_Init+0x74>)
 80004d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_SPI1_Init+0x74>)
 80004da:	2202      	movs	r2, #2
 80004dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_SPI1_Init+0x74>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_SPI1_Init+0x74>)
 80004e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_SPI1_Init+0x74>)
 80004ee:	2218      	movs	r2, #24
 80004f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_SPI1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_SPI1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_SPI1_Init+0x74>)
 8000506:	2207      	movs	r2, #7
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_SPI1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_SPI1_Init+0x74>)
 8000518:	f003 fc80 	bl	8003e1c <HAL_SPI_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f000 f87b 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000bc 	.word	0x200000bc
 8000530:	40013000 	.word	0x40013000

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b32      	ldr	r3, [pc, #200]	; (8000614 <MX_GPIO_Init+0xe0>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a31      	ldr	r2, [pc, #196]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b2f      	ldr	r3, [pc, #188]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <MX_GPIO_Init+0xe0>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a25      	ldr	r2, [pc, #148]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <MX_GPIO_Init+0xe0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RES_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2118      	movs	r1, #24
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f002 f9cf 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BC1_GPIO_Port, LED_BC1_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	481c      	ldr	r0, [pc, #112]	; (8000618 <MX_GPIO_Init+0xe4>)
 80005a6:	f002 f9c9 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RES_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RES_Pin|SPI1_CS_Pin;
 80005aa:	2318      	movs	r3, #24
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f002 f840 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BC1_Pin */
  GPIO_InitStruct.Pin = LED_BC1_Pin;
 80005c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BC1_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_GPIO_Init+0xe4>)
 80005e2:	f002 f831 	bl	8002648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f002 f81f 	bl	8002648 <HAL_GPIO_Init>

}
 800060a:	bf00      	nop
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x44>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_SPI_MspInit+0x7c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d128      	bne.n	80006e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_SPI_MspInit+0x80>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <HAL_SPI_MspInit+0x80>)
 8000698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_SPI_MspInit+0x80>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_SPI_MspInit+0x80>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_SPI_MspInit+0x80>)
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_SPI_MspInit+0x80>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006d2:	2305      	movs	r3, #5
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f001 ffb2 	bl	8002648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40013000 	.word	0x40013000
 80006f0:	40021000 	.word	0x40021000

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f001 fe58 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
 8000798:	4613      	mov	r3, r2
 800079a:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	7c1b      	ldrb	r3, [r3, #16]
 80007a2:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ac:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	89ba      	ldrh	r2, [r7, #12]
 80007b4:	fb12 f303 	smulbb	r3, r2, r3
 80007b8:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80007ba:	89bb      	ldrh	r3, [r7, #12]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80007c0:	89bb      	ldrh	r3, [r7, #12]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	4413      	add	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80007c8:	7bf9      	ldrb	r1, [r7, #15]
 80007ca:	78ba      	ldrb	r2, [r7, #2]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	460b      	mov	r3, r1
 80007d2:	2100      	movs	r1, #0
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f001 fcce 	bl	8002176 <u8x8_DrawTile>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b084      	sub	sp, #16
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80007f4:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80007fc:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7c5b      	ldrb	r3, [r3, #17]
 8000804:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	4619      	mov	r1, r3
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffbd 	bl	800078c <u8g2_send_tile_row>
    src_row++;
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3301      	adds	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	3301      	adds	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800081e:	7bfa      	ldrb	r2, [r7, #15]
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	429a      	cmp	r2, r3
 8000824:	d203      	bcs.n	800082e <u8g2_send_buffer+0x4c>
 8000826:	7bba      	ldrb	r2, [r7, #14]
 8000828:	7b3b      	ldrb	r3, [r7, #12]
 800082a:	429a      	cmp	r2, r3
 800082c:	d3eb      	bcc.n	8000806 <u8g2_send_buffer+0x24>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffcf 	bl	80007e2 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f001 fce7 	bl	8002218 <u8x8_RefreshDisplay>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <u8g2_m_32_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_32_8_f(uint8_t *page_cnt)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[2048];
  *page_cnt = 8;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2208      	movs	r2, #8
 8000860:	701a      	strb	r2, [r3, #0]
  return buf;
 8000862:	4b03      	ldr	r3, [pc, #12]	; (8000870 <u8g2_m_32_8_f+0x1c>)
  #endif
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20000120 	.word	0x20000120

08000874 <u8g2_Setup_ssd1322_nhd_256x64_f>:
  buf = u8g2_m_32_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1322 f */
void u8g2_Setup_ssd1322_nhd_256x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af02      	add	r7, sp, #8
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <u8g2_Setup_ssd1322_nhd_256x64_f+0x44>)
 800088a:	490c      	ldr	r1, [pc, #48]	; (80008bc <u8g2_Setup_ssd1322_nhd_256x64_f+0x48>)
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f001 fd23 	bl	80022d8 <u8x8_Setup>
  buf = u8g2_m_32_8_f(&tile_buf_height);
 8000892:	f107 0313 	add.w	r3, r7, #19
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ffdc 	bl	8000854 <u8g2_m_32_8_f>
 800089c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800089e:	7cfa      	ldrb	r2, [r7, #19]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <u8g2_Setup_ssd1322_nhd_256x64_f+0x4c>)
 80008a6:	6979      	ldr	r1, [r7, #20]
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f001 f80d 	bl	80018c8 <u8g2_SetupBuffer>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08001dd5 	.word	0x08001dd5
 80008bc:	08002039 	.word	0x08002039
 80008c0:	0800174b 	.word	0x0800174b

080008c4 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	81fb      	strh	r3, [r7, #14]
    font++;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b29a      	uxth	r2, r3
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	4413      	add	r3, r2
 8000918:	81fb      	strh	r3, [r7, #14]
    return pos;
 800091a:	89fb      	ldrh	r3, [r7, #14]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f7ff ffc5 	bl	80008c4 <u8g2_font_get_byte>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000942:	2101      	movs	r1, #1
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f7ff ffbd 	bl	80008c4 <u8g2_font_get_byte>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000952:	2102      	movs	r1, #2
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f7ff ffb5 	bl	80008c4 <u8g2_font_get_byte>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000962:	2103      	movs	r1, #3
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f7ff ffad 	bl	80008c4 <u8g2_font_get_byte>
 800096a:	4603      	mov	r3, r0
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000972:	2104      	movs	r1, #4
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f7ff ffa5 	bl	80008c4 <u8g2_font_get_byte>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000982:	2105      	movs	r1, #5
 8000984:	6838      	ldr	r0, [r7, #0]
 8000986:	f7ff ff9d 	bl	80008c4 <u8g2_font_get_byte>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000992:	2106      	movs	r1, #6
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f7ff ff95 	bl	80008c4 <u8g2_font_get_byte>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80009a2:	2107      	movs	r1, #7
 80009a4:	6838      	ldr	r0, [r7, #0]
 80009a6:	f7ff ff8d 	bl	80008c4 <u8g2_font_get_byte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80009b2:	2108      	movs	r1, #8
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f7ff ff85 	bl	80008c4 <u8g2_font_get_byte>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80009c2:	2109      	movs	r1, #9
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f7ff ff7d 	bl	80008c4 <u8g2_font_get_byte>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b25a      	sxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80009d2:	210a      	movs	r1, #10
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f7ff ff75 	bl	80008c4 <u8g2_font_get_byte>
 80009da:	4603      	mov	r3, r0
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80009e2:	210b      	movs	r1, #11
 80009e4:	6838      	ldr	r0, [r7, #0]
 80009e6:	f7ff ff6d 	bl	80008c4 <u8g2_font_get_byte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80009f2:	210c      	movs	r1, #12
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f7ff ff65 	bl	80008c4 <u8g2_font_get_byte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b25a      	sxtb	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000a02:	210d      	movs	r1, #13
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f7ff ff5d 	bl	80008c4 <u8g2_font_get_byte>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000a12:	210e      	movs	r1, #14
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f7ff ff55 	bl	80008c4 <u8g2_font_get_byte>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000a22:	210f      	movs	r1, #15
 8000a24:	6838      	ldr	r0, [r7, #0]
 8000a26:	f7ff ff4d 	bl	80008c4 <u8g2_font_get_byte>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	6838      	ldr	r0, [r7, #0]
 8000a36:	f7ff ff45 	bl	80008c4 <u8g2_font_get_byte>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b25a      	sxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000a42:	2111      	movs	r1, #17
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	f7ff ff4f 	bl	80008e8 <u8g2_font_get_word>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000a52:	2113      	movs	r1, #19
 8000a54:	6838      	ldr	r0, [r7, #0]
 8000a56:	f7ff ff47 	bl	80008e8 <u8g2_font_get_word>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000a62:	2115      	movs	r1, #21
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f7ff ff3f 	bl	80008e8 <u8g2_font_get_word>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	82da      	strh	r2, [r3, #22]
#endif
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7b1b      	ldrb	r3, [r3, #12]
 8000a8a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	7b7b      	ldrb	r3, [r7, #13]
 8000a98:	fa42 f303 	asr.w	r3, r2, r3
 8000a9c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000a9e:	7b7b      	ldrb	r3, [r7, #13]
 8000aa0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000aa2:	7bba      	ldrb	r2, [r7, #14]
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d91a      	bls.n	8000ae6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000ab4:	7b3a      	ldrb	r2, [r7, #12]
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	7b3b      	ldrb	r3, [r7, #12]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	b25a      	sxtb	r2, r3
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	3b08      	subs	r3, #8
 8000ae4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	4013      	ands	r3, r2
 8000afa:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7bba      	ldrb	r2, [r7, #14]
 8000b00:	731a      	strb	r2, [r3, #12]
  return val;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ffaa 	bl	8000a7a <u8g2_font_decode_get_unsigned_bits>
 8000b26:	4603      	mov	r3, r0
 8000b28:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000b34:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000b40:	7bfa      	ldrb	r2, [r7, #15]
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	73fb      	strb	r3, [r7, #15]
  return v;
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000b56:	b490      	push	{r4, r7}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4611      	mov	r1, r2
 8000b62:	461a      	mov	r2, r3
 8000b64:	4623      	mov	r3, r4
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	4603      	mov	r3, r0
 8000b6a:	717b      	strb	r3, [r7, #5]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	713b      	strb	r3, [r7, #4]
 8000b70:	4613      	mov	r3, r2
 8000b72:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d014      	beq.n	8000ba4 <u8g2_add_vector_y+0x4e>
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	dc19      	bgt.n	8000bb2 <u8g2_add_vector_y+0x5c>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <u8g2_add_vector_y+0x32>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d007      	beq.n	8000b96 <u8g2_add_vector_y+0x40>
 8000b86:	e014      	b.n	8000bb2 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000b88:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4413      	add	r3, r2
 8000b92:	80fb      	strh	r3, [r7, #6]
      break;
 8000b94:	e014      	b.n	8000bc0 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000b96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	80fb      	strh	r3, [r7, #6]
      break;
 8000ba2:	e00d      	b.n	8000bc0 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000ba4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	88fa      	ldrh	r2, [r7, #6]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	80fb      	strh	r3, [r7, #6]
      break;
 8000bb0:	e006      	b.n	8000bc0 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000bb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	88fa      	ldrh	r2, [r7, #6]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	80fb      	strh	r3, [r7, #6]
      break;      
 8000bbe:	bf00      	nop
  }
  return dy;
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc90      	pop	{r4, r7}
 8000bca:	4770      	bx	lr

08000bcc <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000bcc:	b490      	push	{r4, r7}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4623      	mov	r3, r4
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	4603      	mov	r3, r0
 8000be0:	717b      	strb	r3, [r7, #5]
 8000be2:	460b      	mov	r3, r1
 8000be4:	713b      	strb	r3, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d014      	beq.n	8000c1a <u8g2_add_vector_x+0x4e>
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	dc19      	bgt.n	8000c28 <u8g2_add_vector_x+0x5c>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <u8g2_add_vector_x+0x32>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d007      	beq.n	8000c0c <u8g2_add_vector_x+0x40>
 8000bfc:	e014      	b.n	8000c28 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000bfe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4413      	add	r3, r2
 8000c08:	80fb      	strh	r3, [r7, #6]
      break;
 8000c0a:	e014      	b.n	8000c36 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000c0c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	80fb      	strh	r3, [r7, #6]
      break;
 8000c18:	e00d      	b.n	8000c36 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000c1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	80fb      	strh	r3, [r7, #6]
      break;
 8000c26:	e006      	b.n	8000c36 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000c28:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4413      	add	r3, r2
 8000c32:	80fb      	strh	r3, [r7, #6]
      break;      
 8000c34:	bf00      	nop
  }
  return dx;
 8000c36:	88fb      	ldrh	r3, [r7, #6]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc90      	pop	{r4, r7}
 8000c40:	4770      	bx	lr

08000c42 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b088      	sub	sp, #32
 8000c46:	af02      	add	r7, sp, #8
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3360      	adds	r3, #96	; 0x60
 8000c56:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000c62:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c6a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000c72:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	7d7b      	ldrb	r3, [r7, #21]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000c80:	7dfa      	ldrb	r2, [r7, #23]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d201      	bcs.n	8000c8c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000c88:	7dfb      	ldrb	r3, [r7, #23]
 8000c8a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	889b      	ldrh	r3, [r3, #4]
 8000c90:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	88db      	ldrh	r3, [r3, #6]
 8000c96:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000c98:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000c9c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	7c1b      	ldrb	r3, [r3, #16]
 8000ca4:	89b8      	ldrh	r0, [r7, #12]
 8000ca6:	f7ff ff91 	bl	8000bcc <u8g2_add_vector_x>
 8000caa:	4603      	mov	r3, r0
 8000cac:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000cae:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000cb2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	7c1b      	ldrb	r3, [r3, #16]
 8000cba:	8978      	ldrh	r0, [r7, #10]
 8000cbc:	f7ff ff4b 	bl	8000b56 <u8g2_add_vector_y>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000cc4:	78bb      	ldrb	r3, [r7, #2]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d010      	beq.n	8000cec <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	7b9a      	ldrb	r2, [r3, #14]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8000cd4:	7dbb      	ldrb	r3, [r7, #22]
 8000cd6:	b298      	uxth	r0, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	7c1b      	ldrb	r3, [r3, #16]
 8000cdc:	897a      	ldrh	r2, [r7, #10]
 8000cde:	89b9      	ldrh	r1, [r7, #12]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 fc30 	bl	800154a <u8g2_DrawHVLine>
 8000cea:	e013      	b.n	8000d14 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	7b5b      	ldrb	r3, [r3, #13]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10f      	bne.n	8000d14 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	7bda      	ldrb	r2, [r3, #15]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8000cfe:	7dbb      	ldrb	r3, [r7, #22]
 8000d00:	b298      	uxth	r0, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	7c1b      	ldrb	r3, [r3, #16]
 8000d06:	897a      	ldrh	r2, [r7, #10]
 8000d08:	89b9      	ldrh	r1, [r7, #12]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fc1b 	bl	800154a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000d14:	7dfa      	ldrb	r2, [r7, #23]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d309      	bcc.n	8000d30 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8000d1c:	7dfa      	ldrb	r2, [r7, #23]
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	757b      	strb	r3, [r7, #21]
    ly++;
 8000d28:	7d3b      	ldrb	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000d2e:	e79d      	b.n	8000c6c <u8g2_font_decode_len+0x2a>
      break;
 8000d30:	bf00      	nop
  }
  lx += cnt;
 8000d32:	7d7a      	ldrb	r2, [r7, #21]
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	4413      	add	r3, r2
 8000d38:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000d3a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8000d42:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	725a      	strb	r2, [r3, #9]
  
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3360      	adds	r3, #96	; 0x60
 8000d60:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000d74:	4619      	mov	r1, r3
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff fe7f 	bl	8000a7a <u8g2_font_decode_get_unsigned_bits>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fe74 	bl	8000a7a <u8g2_font_decode_get_unsigned_bits>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	7b9b      	ldrb	r3, [r3, #14]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	73da      	strb	r2, [r3, #15]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3360      	adds	r3, #96	; 0x60
 8000dce:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffbd 	bl	8000d52 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8000dde:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000de6:	4619      	mov	r1, r3
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff fe91 	bl	8000b10 <u8g2_font_decode_get_signed_bits>
 8000dee:	4603      	mov	r3, r0
 8000df0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff fe88 	bl	8000b10 <u8g2_font_decode_get_signed_bits>
 8000e00:	4603      	mov	r3, r0
 8000e02:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f7ff fe7f 	bl	8000b10 <u8g2_font_decode_get_signed_bits>
 8000e12:	4603      	mov	r3, r0
 8000e14:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f340 80d7 	ble.w	8000fd0 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	8898      	ldrh	r0, [r3, #4]
 8000e26:	7cfa      	ldrb	r2, [r7, #19]
 8000e28:	7c7b      	ldrb	r3, [r7, #17]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	425b      	negs	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	b25a      	sxtb	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	7c1b      	ldrb	r3, [r3, #16]
 8000e38:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e3c:	f7ff fec6 	bl	8000bcc <u8g2_add_vector_x>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	88d8      	ldrh	r0, [r3, #6]
 8000e4c:	7cfa      	ldrb	r2, [r7, #19]
 8000e4e:	7c7b      	ldrb	r3, [r7, #17]
 8000e50:	4413      	add	r3, r2
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	425b      	negs	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	b25a      	sxtb	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	7c1b      	ldrb	r3, [r3, #16]
 8000e5e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000e62:	f7ff fe78 	bl	8000b56 <u8g2_add_vector_y>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	889b      	ldrh	r3, [r3, #4]
 8000e72:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	88db      	ldrh	r3, [r3, #6]
 8000e78:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8000e7a:	8bfb      	ldrh	r3, [r7, #30]
 8000e7c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8000e7e:	8b7b      	ldrh	r3, [r7, #26]
 8000e80:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	7c1b      	ldrb	r3, [r3, #16]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d85a      	bhi.n	8000f40 <u8g2_font_decode_glyph+0x180>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <u8g2_font_decode_glyph+0xd0>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000ebd 	.word	0x08000ebd
 8000e98:	08000ee5 	.word	0x08000ee5
 8000e9c:	08000f19 	.word	0x08000f19
      {
	case 0:
	    x1 += decode->glyph_width;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	8bbb      	ldrh	r3, [r7, #28]
 8000eaa:	4413      	add	r3, r2
 8000eac:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8000eae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	8b3b      	ldrh	r3, [r7, #24]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	833b      	strh	r3, [r7, #24]
	    break;
 8000eba:	e041      	b.n	8000f40 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8000ebc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	8bfa      	ldrh	r2, [r7, #30]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ec8:	8bfb      	ldrh	r3, [r7, #30]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000ece:	8bbb      	ldrh	r3, [r7, #28]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	8b3b      	ldrh	r3, [r7, #24]
 8000ede:	4413      	add	r3, r2
 8000ee0:	833b      	strh	r3, [r7, #24]
	    break;
 8000ee2:	e02d      	b.n	8000f40 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	8bfa      	ldrh	r2, [r7, #30]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000ef2:	8bfb      	ldrh	r3, [r7, #30]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8000ef8:	8bbb      	ldrh	r3, [r7, #28]
 8000efa:	3301      	adds	r3, #1
 8000efc:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8000efe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	8b7a      	ldrh	r2, [r7, #26]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000f0a:	8b7b      	ldrh	r3, [r7, #26]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000f10:	8b3b      	ldrh	r3, [r7, #24]
 8000f12:	3301      	adds	r3, #1
 8000f14:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000f16:	e013      	b.n	8000f40 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8000f18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	8bbb      	ldrh	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	8b7a      	ldrh	r2, [r7, #26]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8000f32:	8b7b      	ldrh	r3, [r7, #26]
 8000f34:	3301      	adds	r3, #1
 8000f36:	837b      	strh	r3, [r7, #26]
	    y1++;
 8000f38:	8b3b      	ldrh	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	833b      	strh	r3, [r7, #24]
	    break;	  
 8000f3e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8000f40:	8bb8      	ldrh	r0, [r7, #28]
 8000f42:	8b7a      	ldrh	r2, [r7, #26]
 8000f44:	8bf9      	ldrh	r1, [r7, #30]
 8000f46:	8b3b      	ldrh	r3, [r7, #24]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 fbd1 	bl	80016f4 <u8g2_IsIntersection>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <u8g2_font_decode_glyph+0x19e>
	return d;
 8000f58:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8000f5c:	e03a      	b.n	8000fd4 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2200      	movs	r2, #0
 8000f62:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2200      	movs	r2, #0
 8000f68:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8000f70:	4619      	mov	r1, r3
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff fd81 	bl	8000a7a <u8g2_font_decode_get_unsigned_bits>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000f82:	4619      	mov	r1, r3
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff fd78 	bl	8000a7a <u8g2_font_decode_get_unsigned_bits>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fe54 	bl	8000c42 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff fe4e 	bl	8000c42 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff fd66 	bl	8000a7a <u8g2_font_decode_get_unsigned_bits>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1ec      	bne.n	8000f8e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000fba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dd00      	ble.n	8000fc4 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8000fc2:	e7d2      	b.n	8000f6a <u8g2_font_decode_glyph+0x1aa>
	break;
 8000fc4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	7b9a      	ldrb	r2, [r3, #14]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8000fd0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3317      	adds	r3, #23
 8000ff2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	2bff      	cmp	r3, #255	; 0xff
 8000ff8:	d82a      	bhi.n	8001050 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	2b60      	cmp	r3, #96	; 0x60
 8000ffe:	d907      	bls.n	8001010 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e009      	b.n	8001024 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	2b40      	cmp	r3, #64	; 0x40
 8001014:	d906      	bls.n	8001024 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800101c:	461a      	mov	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	4413      	add	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d04e      	beq.n	80010cc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d102      	bne.n	8001040 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3302      	adds	r3, #2
 800103e:	e049      	b.n	80010d4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	4413      	add	r3, r2
 800104c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800104e:	e7e9      	b.n	8001024 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001056:	461a      	mov	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4413      	add	r3, r2
 800105c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001062:	2100      	movs	r1, #0
 8001064:	6938      	ldr	r0, [r7, #16]
 8001066:	f7ff fc3f 	bl	80008e8 <u8g2_font_get_word>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	4413      	add	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001074:	2102      	movs	r1, #2
 8001076:	6938      	ldr	r0, [r7, #16]
 8001078:	f7ff fc36 	bl	80008e8 <u8g2_font_get_word>
 800107c:	4603      	mov	r3, r0
 800107e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	3304      	adds	r3, #4
 8001084:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001086:	89fa      	ldrh	r2, [r7, #14]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3e9      	bcc.n	8001062 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d010      	beq.n	80010d0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80010ae:	89fa      	ldrh	r2, [r7, #14]
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d102      	bne.n	80010bc <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3303      	adds	r3, #3
 80010ba:	e00b      	b.n	80010d4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3302      	adds	r3, #2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80010ca:	e7e0      	b.n	800108e <u8g2_font_get_glyph_data+0xb2>
	break;
 80010cc:	bf00      	nop
 80010ce:	e000      	b.n	80010d2 <u8g2_font_get_glyph_data+0xf6>
	break;
 80010d0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4603      	mov	r3, r0
 80010ec:	817b      	strh	r3, [r7, #10]
 80010ee:	460b      	mov	r3, r1
 80010f0:	813b      	strh	r3, [r7, #8]
 80010f2:	4613      	mov	r3, r2
 80010f4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	897a      	ldrh	r2, [r7, #10]
 80010fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	893a      	ldrh	r2, [r7, #8]
 8001106:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4619      	mov	r1, r3
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff ff64 	bl	8000fdc <u8g2_font_get_glyph_data>
 8001114:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fe4e 	bl	8000dc0 <u8g2_font_decode_glyph>
 8001124:	4603      	mov	r3, r0
 8001126:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001128:	8afb      	ldrh	r3, [r7, #22]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	78fa      	ldrb	r2, [r7, #3]
 8001142:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	817b      	strh	r3, [r7, #10]
 8001166:	460b      	mov	r3, r1
 8001168:	813b      	strh	r3, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001174:	2b03      	cmp	r3, #3
 8001176:	d833      	bhi.n	80011e0 <u8g2_DrawGlyph+0x8c>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <u8g2_DrawGlyph+0x2c>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	08001191 	.word	0x08001191
 8001184:	080011a5 	.word	0x080011a5
 8001188:	080011b9 	.word	0x080011b9
 800118c:	080011cd 	.word	0x080011cd
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	4798      	blx	r3
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	893b      	ldrh	r3, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	813b      	strh	r3, [r7, #8]
      break;
 80011a2:	e01d      	b.n	80011e0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	4798      	blx	r3
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	897b      	ldrh	r3, [r7, #10]
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	817b      	strh	r3, [r7, #10]
      break;
 80011b6:	e013      	b.n	80011e0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	4798      	blx	r3
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	893b      	ldrh	r3, [r7, #8]
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	813b      	strh	r3, [r7, #8]
      break;
 80011ca:	e009      	b.n	80011e0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	4798      	blx	r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	897b      	ldrh	r3, [r7, #10]
 80011da:	4413      	add	r3, r2
 80011dc:	817b      	strh	r3, [r7, #10]
      break;
 80011de:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	893a      	ldrh	r2, [r7, #8]
 80011e4:	8979      	ldrh	r1, [r7, #10]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f7ff ff78 	bl	80010dc <u8g2_font_draw_glyph>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	4613      	mov	r3, r2
 8001208:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fcdd 	bl	8001bca <u8x8_utf8_init>
  sum = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	4611      	mov	r1, r2
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	4798      	blx	r3
 8001222:	4603      	mov	r3, r0
 8001224:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001226:	8abb      	ldrh	r3, [r7, #20]
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	4293      	cmp	r3, r2
 800122e:	d038      	beq.n	80012a2 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001236:	8abb      	ldrh	r3, [r7, #20]
 8001238:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800123c:	4293      	cmp	r3, r2
 800123e:	d0e9      	beq.n	8001214 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001240:	8abb      	ldrh	r3, [r7, #20]
 8001242:	893a      	ldrh	r2, [r7, #8]
 8001244:	8979      	ldrh	r1, [r7, #10]
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ff84 	bl	8001154 <u8g2_DrawGlyph>
 800124c:	4603      	mov	r3, r0
 800124e:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001256:	2b03      	cmp	r3, #3
 8001258:	d81e      	bhi.n	8001298 <u8g2_draw_string+0xa0>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <u8g2_draw_string+0x68>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	0800127b 	.word	0x0800127b
 8001268:	08001285 	.word	0x08001285
 800126c:	0800128f 	.word	0x0800128f
      {
	case 0:
	  x += delta;
 8001270:	897a      	ldrh	r2, [r7, #10]
 8001272:	8a7b      	ldrh	r3, [r7, #18]
 8001274:	4413      	add	r3, r2
 8001276:	817b      	strh	r3, [r7, #10]
	  break;
 8001278:	e00e      	b.n	8001298 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800127a:	893a      	ldrh	r2, [r7, #8]
 800127c:	8a7b      	ldrh	r3, [r7, #18]
 800127e:	4413      	add	r3, r2
 8001280:	813b      	strh	r3, [r7, #8]
	  break;
 8001282:	e009      	b.n	8001298 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001284:	897a      	ldrh	r2, [r7, #10]
 8001286:	8a7b      	ldrh	r3, [r7, #18]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	817b      	strh	r3, [r7, #10]
	  break;
 800128c:	e004      	b.n	8001298 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800128e:	893a      	ldrh	r2, [r7, #8]
 8001290:	8a7b      	ldrh	r3, [r7, #18]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	813b      	strh	r3, [r7, #8]
	  break;
 8001296:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001298:	8afa      	ldrh	r2, [r7, #22]
 800129a:	8a7b      	ldrh	r3, [r7, #18]
 800129c:	4413      	add	r3, r2
 800129e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80012a0:	e7b8      	b.n	8001214 <u8g2_draw_string+0x1c>
      break;
 80012a2:	bf00      	nop
    }
  }
  return sum;
 80012a4:	8afb      	ldrh	r3, [r7, #22]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop

080012b0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	817b      	strh	r3, [r7, #10]
 80012be:	4613      	mov	r3, r2
 80012c0:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <u8g2_DrawStr+0x30>)
 80012c6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80012c8:	893a      	ldrh	r2, [r7, #8]
 80012ca:	8979      	ldrh	r1, [r7, #10]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff92 	bl	80011f8 <u8g2_draw_string>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	08001be7 	.word	0x08001be7

080012e4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05d      	beq.n	80013b0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001312:	2b00      	cmp	r3, #0
 8001314:	d04d      	beq.n	80013b2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800131c:	2b01      	cmp	r3, #1
 800131e:	d11c      	bne.n	800135a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800132c:	429a      	cmp	r2, r3
 800132e:	da05      	bge.n	800133c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001348:	429a      	cmp	r2, r3
 800134a:	dd32      	ble.n	80013b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001358:	e02b      	b.n	80013b2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001360:	461a      	mov	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001368:	4619      	mov	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001370:	440b      	add	r3, r1
 8001372:	429a      	cmp	r2, r3
 8001374:	da0d      	bge.n	8001392 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800137c:	b2da      	uxtb	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b2db      	uxtb	r3, r3
 800138a:	b25a      	sxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800139e:	429a      	cmp	r2, r3
 80013a0:	dd07      	ble.n	80013b2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80013ae:	e000      	b.n	80013b2 <u8g2_UpdateRefHeight+0xce>
    return;
 80013b0:	bf00      	nop
  }  
}
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <u8g2_SetFontPosBaseline+0x1c>)
 80013e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	080013bd 	.word	0x080013bd

080013f4 <u8g2_font_calc_vref_top>:
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001402:	81fb      	strh	r3, [r7, #14]
  tmp++;
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	3301      	adds	r3, #1
 8001408:	81fb      	strh	r3, [r7, #14]
  return tmp;
 800140a:	89fb      	ldrh	r3, [r7, #14]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <u8g2_SetFontPosTop+0x1c>)
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	080013f5 	.word	0x080013f5

08001438 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d00b      	beq.n	8001464 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3374      	adds	r3, #116	; 0x74
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fa65 	bl	8000928 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff40 	bl	80012e4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	460b      	mov	r3, r1
 800147c:	80fb      	strh	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001488:	8afb      	ldrh	r3, [r7, #22]
 800148a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	8abb      	ldrh	r3, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001496:	8afa      	ldrh	r2, [r7, #22]
 8001498:	8abb      	ldrh	r3, [r7, #20]
 800149a:	429a      	cmp	r2, r3
 800149c:	d90b      	bls.n	80014b6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800149e:	8afa      	ldrh	r2, [r7, #22]
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d205      	bcs.n	80014b2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	82bb      	strh	r3, [r7, #20]
      b--;
 80014aa:	8abb      	ldrh	r3, [r7, #20]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	82bb      	strh	r3, [r7, #20]
 80014b0:	e001      	b.n	80014b6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80014b6:	8afa      	ldrh	r2, [r7, #22]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d301      	bcc.n	80014c2 <u8g2_clip_intersection2+0x56>
    return 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	e01c      	b.n	80014fc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80014c2:	8aba      	ldrh	r2, [r7, #20]
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d801      	bhi.n	80014ce <u8g2_clip_intersection2+0x62>
    return 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e016      	b.n	80014fc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80014ce:	8afa      	ldrh	r2, [r7, #22]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d201      	bcs.n	80014da <u8g2_clip_intersection2+0x6e>
    a = c;
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80014da:	8aba      	ldrh	r2, [r7, #20]
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d901      	bls.n	80014e6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8afa      	ldrh	r2, [r7, #22]
 80014ea:	801a      	strh	r2, [r3, #0]
  b -= a;
 80014ec:	8aba      	ldrh	r2, [r7, #20]
 80014ee:	8afb      	ldrh	r3, [r7, #22]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	8aba      	ldrh	r2, [r7, #20]
 80014f8:	801a      	strh	r2, [r3, #0]
  return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b087      	sub	sp, #28
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4603      	mov	r3, r0
 8001518:	817b      	strh	r3, [r7, #10]
 800151a:	460b      	mov	r3, r1
 800151c:	813b      	strh	r3, [r7, #8]
 800151e:	4613      	mov	r3, r2
 8001520:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001526:	893a      	ldrh	r2, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001530:	88f8      	ldrh	r0, [r7, #6]
 8001532:	893a      	ldrh	r2, [r7, #8]
 8001534:	8979      	ldrh	r1, [r7, #10]
 8001536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	4603      	mov	r3, r0
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	47a0      	blx	r4
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}

0800154a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800154a:	b590      	push	{r4, r7, lr}
 800154c:	b087      	sub	sp, #28
 800154e:	af02      	add	r7, sp, #8
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	4608      	mov	r0, r1
 8001554:	4611      	mov	r1, r2
 8001556:	461a      	mov	r2, r3
 8001558:	4603      	mov	r3, r0
 800155a:	817b      	strh	r3, [r7, #10]
 800155c:	460b      	mov	r3, r1
 800155e:	813b      	strh	r3, [r7, #8]
 8001560:	4613      	mov	r3, r2
 8001562:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800156a:	2b00      	cmp	r3, #0
 800156c:	d075      	beq.n	800165a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d072      	beq.n	800165a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d91a      	bls.n	80015b0 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800157a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d109      	bne.n	8001596 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001582:	897a      	ldrh	r2, [r7, #10]
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b29b      	uxth	r3, r3
 800158a:	817b      	strh	r3, [r7, #10]
	  x++;
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	3301      	adds	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	817b      	strh	r3, [r7, #10]
 8001594:	e00c      	b.n	80015b0 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001596:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d108      	bne.n	80015b0 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800159e:	893a      	ldrh	r2, [r7, #8]
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	813b      	strh	r3, [r7, #8]
	  y++;
 80015a8:	893b      	ldrh	r3, [r7, #8]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80015b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80015bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d11a      	bne.n	80015fa <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80015ca:	893b      	ldrh	r3, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d83b      	bhi.n	8001648 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d937      	bls.n	800164c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80015e8:	1db9      	adds	r1, r7, #6
 80015ea:	f107 000a 	add.w	r0, r7, #10
 80015ee:	f7ff ff3d 	bl	800146c <u8g2_clip_intersection2>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11a      	bne.n	800162e <u8g2_DrawHVLine+0xe4>
	  return;
 80015f8:	e02f      	b.n	800165a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	429a      	cmp	r2, r3
 8001604:	d824      	bhi.n	8001650 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	429a      	cmp	r2, r3
 8001610:	d920      	bls.n	8001654 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800161e:	1db9      	adds	r1, r7, #6
 8001620:	f107 0008 	add.w	r0, r7, #8
 8001624:	f7ff ff22 	bl	800146c <u8g2_clip_intersection2>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d014      	beq.n	8001658 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	689c      	ldr	r4, [r3, #8]
 8001634:	8979      	ldrh	r1, [r7, #10]
 8001636:	893a      	ldrh	r2, [r7, #8]
 8001638:	88f8      	ldrh	r0, [r7, #6]
 800163a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4603      	mov	r3, r0
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	47a0      	blx	r4
 8001646:	e008      	b.n	800165a <u8g2_DrawHVLine+0x110>
	  return;
 8001648:	bf00      	nop
 800164a:	e006      	b.n	800165a <u8g2_DrawHVLine+0x110>
	  return;
 800164c:	bf00      	nop
 800164e:	e004      	b.n	800165a <u8g2_DrawHVLine+0x110>
	  return;
 8001650:	bf00      	nop
 8001652:	e002      	b.n	800165a <u8g2_DrawHVLine+0x110>
	  return;
 8001654:	bf00      	nop
 8001656:	e000      	b.n	800165a <u8g2_DrawHVLine+0x110>
	  return;
 8001658:	bf00      	nop
    }
}
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}

08001660 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d903      	bls.n	8001682 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800168e:	b490      	push	{r4, r7}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4604      	mov	r4, r0
 8001696:	4608      	mov	r0, r1
 8001698:	4611      	mov	r1, r2
 800169a:	461a      	mov	r2, r3
 800169c:	4623      	mov	r3, r4
 800169e:	80fb      	strh	r3, [r7, #6]
 80016a0:	4603      	mov	r3, r0
 80016a2:	80bb      	strh	r3, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d20d      	bcs.n	80016d0 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80016b4:	883a      	ldrh	r2, [r7, #0]
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d901      	bls.n	80016c0 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	e014      	b.n	80016ea <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80016c0:	887a      	ldrh	r2, [r7, #2]
 80016c2:	883b      	ldrh	r3, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d901      	bls.n	80016cc <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e00e      	b.n	80016ea <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e00c      	b.n	80016ea <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80016d0:	883a      	ldrh	r2, [r7, #0]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d907      	bls.n	80016e8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	883b      	ldrh	r3, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d901      	bls.n	80016e4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e002      	b.n	80016ea <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80016e8:	2300      	movs	r3, #0
    }
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc90      	pop	{r4, r7}
 80016f2:	4770      	bx	lr

080016f4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4603      	mov	r3, r0
 8001704:	817b      	strh	r3, [r7, #10]
 8001706:	460b      	mov	r3, r1
 8001708:	813b      	strh	r3, [r7, #8]
 800170a:	4613      	mov	r3, r2
 800170c:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800171a:	8b3b      	ldrh	r3, [r7, #24]
 800171c:	893a      	ldrh	r2, [r7, #8]
 800171e:	f7ff ffb6 	bl	800168e <u8g2_is_intersection_decision_tree>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <u8g2_IsIntersection+0x38>
    return 0; 
 8001728:	2300      	movs	r3, #0
 800172a:	e00a      	b.n	8001742 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	897a      	ldrh	r2, [r7, #10]
 800173c:	f7ff ffa7 	bl	800168e <u8g2_is_intersection_decision_tree>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800174a:	b480      	push	{r7}
 800174c:	b089      	sub	sp, #36	; 0x24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	4608      	mov	r0, r1
 8001754:	4611      	mov	r1, r2
 8001756:	461a      	mov	r2, r3
 8001758:	4603      	mov	r3, r0
 800175a:	817b      	strh	r3, [r7, #10]
 800175c:	460b      	mov	r3, r1
 800175e:	813b      	strh	r3, [r7, #8]
 8001760:	4613      	mov	r3, r2
 8001762:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001764:	893b      	ldrh	r3, [r7, #8]
 8001766:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001768:	7efb      	ldrb	r3, [r7, #27]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001774:	7e3a      	ldrb	r2, [r7, #24]
 8001776:	7efb      	ldrb	r3, [r7, #27]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800178c:	2b01      	cmp	r3, #1
 800178e:	d801      	bhi.n	8001794 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001790:	7e3b      	ldrb	r3, [r7, #24]
 8001792:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800179e:	7e3b      	ldrb	r3, [r7, #24]
 80017a0:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80017a2:	893b      	ldrh	r3, [r7, #8]
 80017a4:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80017a6:	8afb      	ldrh	r3, [r7, #22]
 80017a8:	f023 0307 	bic.w	r3, r3, #7
 80017ac:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	7c1b      	ldrb	r3, [r3, #16]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	8afa      	ldrh	r2, [r7, #22]
 80017b8:	fb12 f303 	smulbb	r3, r2, r3
 80017bc:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80017c4:	8afb      	ldrh	r3, [r7, #22]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80017cc:	897b      	ldrh	r3, [r7, #10]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80017d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d117      	bne.n	800180c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	7e7b      	ldrb	r3, [r7, #25]
 80017f0:	4053      	eors	r3, r2
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	701a      	strb	r2, [r3, #0]
	ptr++;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
	len--;
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	3b01      	subs	r3, #1
 8001802:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e8      	bne.n	80017dc <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800180a:	e038      	b.n	800187e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	7ebb      	ldrb	r3, [r7, #26]
 8001812:	4313      	orrs	r3, r2
 8001814:	b2da      	uxtb	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	7e7b      	ldrb	r3, [r7, #25]
 8001820:	4053      	eors	r3, r2
 8001822:	b2da      	uxtb	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001828:	7efb      	ldrb	r3, [r7, #27]
 800182a:	3301      	adds	r3, #1
 800182c:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800182e:	7efb      	ldrb	r3, [r7, #27]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	76fb      	strb	r3, [r7, #27]
      len--;
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	3b01      	subs	r3, #1
 800183a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800183c:	7efb      	ldrb	r3, [r7, #27]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d114      	bne.n	800186c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001846:	461a      	mov	r2, r3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001854:	2b01      	cmp	r3, #1
 8001856:	d801      	bhi.n	800185c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001862:	2b01      	cmp	r3, #1
 8001864:	d008      	beq.n	8001878 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	767b      	strb	r3, [r7, #25]
 800186a:	e005      	b.n	8001878 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800186c:	7ebb      	ldrb	r3, [r7, #26]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001872:	7e7b      	ldrb	r3, [r7, #25]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1c6      	bne.n	800180c <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800187e:	bf00      	nop
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ffad 	bl	800188a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff fd4f 	bl	80013d4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800195a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	89fa      	ldrh	r2, [r7, #14]
 8001966:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	7c1b      	ldrb	r3, [r3, #16]
 800196c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	89fa      	ldrh	r2, [r7, #14]
 8001978:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001980:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001994:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800199e:	4413      	add	r3, r2
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	7c52      	ldrb	r2, [r2, #17]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	dd08      	ble.n	80019ba <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	7c5b      	ldrb	r3, [r3, #17]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	4413      	add	r3, r2
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	8a9a      	ldrh	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	8ada      	ldrh	r2, [r3, #22]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fe61 	bl	80016f4 <u8g2_IsIntersection>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001a40:	e03b      	b.n	8001aba <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d205      	bcs.n	8001a66 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d905      	bls.n	8001a82 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d205      	bcs.n	8001a9e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d905      	bls.n	8001aba <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff3b 	bl	8001946 <u8g2_update_dimension_common>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d30a      	bcc.n	8001b22 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff65 	bl	8001a08 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b088      	sub	sp, #32
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	4608      	mov	r0, r1
 8001b50:	4611      	mov	r1, r2
 8001b52:	461a      	mov	r2, r3
 8001b54:	4603      	mov	r3, r0
 8001b56:	817b      	strh	r3, [r7, #10]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	813b      	strh	r3, [r7, #8]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001b66:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8001b68:	8aba      	ldrh	r2, [r7, #20]
 8001b6a:	893b      	ldrh	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b76:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8001b78:	8afa      	ldrh	r2, [r7, #22]
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8001b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d107      	bne.n	8001b98 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8001b88:	8abb      	ldrh	r3, [r7, #20]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8001b8e:	8afa      	ldrh	r2, [r7, #22]
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	82fb      	strh	r3, [r7, #22]
 8001b96:	e00a      	b.n	8001bae <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8001b98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8001ba0:	8afb      	ldrh	r3, [r7, #22]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8001ba6:	8aba      	ldrh	r2, [r7, #20]
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001bae:	88f8      	ldrh	r0, [r7, #6]
 8001bb0:	8aba      	ldrh	r2, [r7, #20]
 8001bb2:	8af9      	ldrh	r1, [r7, #22]
 8001bb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4603      	mov	r3, r0
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff fca3 	bl	8001508 <u8g2_draw_hv_line_2dir>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <u8x8_ascii_next+0x18>
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	2b0a      	cmp	r3, #10
 8001bfc:	d102      	bne.n	8001c04 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c02:	e001      	b.n	8001c08 <u8x8_ascii_next+0x22>
  return b;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	b29b      	uxth	r3, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691c      	ldr	r4, [r3, #16]
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	2300      	movs	r3, #0
 8001c28:	2120      	movs	r1, #32
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	47a0      	blx	r4
 8001c2e:	4603      	mov	r3, r0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd90      	pop	{r4, r7, pc}

08001c38 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	460b      	mov	r3, r1
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691c      	ldr	r4, [r3, #16]
 8001c4a:	7afa      	ldrb	r2, [r7, #11]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2117      	movs	r1, #23
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	47a0      	blx	r4
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001c6a:	1cfb      	adds	r3, r7, #3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2101      	movs	r1, #1
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ffe1 	bl	8001c38 <u8x8_byte_SendBytes>
 8001c76:	4603      	mov	r3, r0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68dc      	ldr	r4, [r3, #12]
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2115      	movs	r1, #21
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	47a0      	blx	r4
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd90      	pop	{r4, r7, pc}

08001ca4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68dc      	ldr	r4, [r3, #12]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2116      	movs	r1, #22
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	47a0      	blx	r4
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}

08001cc8 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68dc      	ldr	r4, [r3, #12]
 8001cda:	7afa      	ldrb	r2, [r7, #11]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2117      	movs	r1, #23
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	47a0      	blx	r4
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}

08001cee <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001cee:	b590      	push	{r4, r7, lr}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68dc      	ldr	r4, [r3, #12]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2118      	movs	r1, #24
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	47a0      	blx	r4
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}

08001d0e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001d0e:	b590      	push	{r4, r7, lr}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68dc      	ldr	r4, [r3, #12]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2119      	movs	r1, #25
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	47a0      	blx	r4
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}

08001d2e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001d2e:	b590      	push	{r4, r7, lr}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	73fb      	strb	r3, [r7, #15]
    data++;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	3301      	adds	r3, #1
 8001d42:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2bfe      	cmp	r3, #254	; 0xfe
 8001d48:	d031      	beq.n	8001dae <u8x8_cad_SendSequence+0x80>
 8001d4a:	2bfe      	cmp	r3, #254	; 0xfe
 8001d4c:	dc3d      	bgt.n	8001dca <u8x8_cad_SendSequence+0x9c>
 8001d4e:	2b19      	cmp	r3, #25
 8001d50:	dc3b      	bgt.n	8001dca <u8x8_cad_SendSequence+0x9c>
 8001d52:	2b18      	cmp	r3, #24
 8001d54:	da23      	bge.n	8001d9e <u8x8_cad_SendSequence+0x70>
 8001d56:	2b16      	cmp	r3, #22
 8001d58:	dc02      	bgt.n	8001d60 <u8x8_cad_SendSequence+0x32>
 8001d5a:	2b15      	cmp	r3, #21
 8001d5c:	da03      	bge.n	8001d66 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001d5e:	e034      	b.n	8001dca <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001d60:	2b17      	cmp	r3, #23
 8001d62:	d00e      	beq.n	8001d82 <u8x8_cad_SendSequence+0x54>
	return;
 8001d64:	e031      	b.n	8001dca <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68dc      	ldr	r4, [r3, #12]
 8001d70:	7bba      	ldrb	r2, [r7, #14]
 8001d72:	7bf9      	ldrb	r1, [r7, #15]
 8001d74:	2300      	movs	r3, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	47a0      	blx	r4
	  data++;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]
	  break;
 8001d80:	e022      	b.n	8001dc8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001d88:	f107 030e 	add.w	r3, r7, #14
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2101      	movs	r1, #1
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff99 	bl	8001cc8 <u8x8_cad_SendData>
	  data++;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	603b      	str	r3, [r7, #0]
	  break;
 8001d9c:	e014      	b.n	8001dc8 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68dc      	ldr	r4, [r3, #12]
 8001da2:	7bf9      	ldrb	r1, [r7, #15]
 8001da4:	2300      	movs	r3, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	47a0      	blx	r4
	  break;
 8001dac:	e00c      	b.n	8001dc8 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001db4:	7bbb      	ldrb	r3, [r7, #14]
 8001db6:	461a      	mov	r2, r3
 8001db8:	2129      	movs	r1, #41	; 0x29
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa3b 	bl	8002236 <u8x8_gpio_call>
	  data++;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	603b      	str	r3, [r7, #0]
	  break;
 8001dc6:	bf00      	nop
    cmd = *data;
 8001dc8:	e7b6      	b.n	8001d38 <u8x8_cad_SendSequence+0xa>
	return;
 8001dca:	bf00      	nop
    }
  }
}
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
	...

08001dd4 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	72fb      	strb	r3, [r7, #11]
 8001de2:	4613      	mov	r3, r2
 8001de4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001de6:	7afb      	ldrb	r3, [r7, #11]
 8001de8:	3b14      	subs	r3, #20
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d82f      	bhi.n	8001e4e <u8x8_cad_011+0x7a>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <u8x8_cad_011+0x20>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e3d 	.word	0x08001e3d
 8001df8:	08001e0d 	.word	0x08001e0d
 8001dfc:	08001e21 	.word	0x08001e21
 8001e00:	08001e35 	.word	0x08001e35
 8001e04:	08001e3d 	.word	0x08001e3d
 8001e08:	08001e3d 	.word	0x08001e3d
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff ff00 	bl	8001c14 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001e14:	7abb      	ldrb	r3, [r7, #10]
 8001e16:	4619      	mov	r1, r3
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff ff20 	bl	8001c5e <u8x8_byte_SendByte>
      break;
 8001e1e:	e018      	b.n	8001e52 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8001e20:	2101      	movs	r1, #1
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fef6 	bl	8001c14 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001e28:	7abb      	ldrb	r3, [r7, #10]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff ff16 	bl	8001c5e <u8x8_byte_SendByte>
      break;
 8001e32:	e00e      	b.n	8001e52 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001e34:	2101      	movs	r1, #1
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff feec 	bl	8001c14 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691c      	ldr	r4, [r3, #16]
 8001e40:	7aba      	ldrb	r2, [r7, #10]
 8001e42:	7af9      	ldrb	r1, [r7, #11]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	47a0      	blx	r4
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	e002      	b.n	8001e54 <u8x8_cad_011+0x80>
    default:
      return 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <u8x8_cad_011+0x80>
  }
  return 1;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <u8x8_ssd1322_8to32>:
*/

static uint8_t u8x8_ssd1322_to32_dest_buf[32];

static uint8_t *u8x8_ssd1322_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 8001e66:	2300      	movs	r3, #0
 8001e68:	74fb      	strb	r3, [r7, #19]
 8001e6a:	e03d      	b.n	8001ee8 <u8x8_ssd1322_8to32+0x8c>
  {
    dest = u8x8_ssd1322_to32_dest_buf;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <u8x8_ssd1322_8to32+0xa0>)
 8001e6e:	60fb      	str	r3, [r7, #12]
    dest += j;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	75bb      	strb	r3, [r7, #22]
    ptr++;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	603b      	str	r3, [r7, #0]
    b = *ptr;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	757b      	strb	r3, [r7, #21]
    ptr++;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 8001e90:	2300      	movs	r3, #0
 8001e92:	753b      	strb	r3, [r7, #20]
 8001e94:	e022      	b.n	8001edc <u8x8_ssd1322_8to32+0x80>
    {
      v = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 8001e9a:	7dbb      	ldrb	r3, [r7, #22]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <u8x8_ssd1322_8to32+0x50>
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	f063 030f 	orn	r3, r3, #15
 8001eaa:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 8001eac:	7d7b      	ldrb	r3, [r7, #21]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <u8x8_ssd1322_8to32+0x62>
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	f043 030f 	orr.w	r3, r3, #15
 8001ebc:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	7dfa      	ldrb	r2, [r7, #23]
 8001ec2:	701a      	strb	r2, [r3, #0]
      dest+=4;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 8001eca:	7dbb      	ldrb	r3, [r7, #22]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 8001ed0:	7d7b      	ldrb	r3, [r7, #21]
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 8001ed6:	7d3b      	ldrb	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	753b      	strb	r3, [r7, #20]
 8001edc:	7d3b      	ldrb	r3, [r7, #20]
 8001ede:	2b07      	cmp	r3, #7
 8001ee0:	d9d9      	bls.n	8001e96 <u8x8_ssd1322_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	74fb      	strb	r3, [r7, #19]
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d9be      	bls.n	8001e6c <u8x8_ssd1322_8to32+0x10>
    }
  }
  
  return u8x8_ssd1322_to32_dest_buf;
 8001eee:	4b03      	ldr	r3, [pc, #12]	; (8001efc <u8x8_ssd1322_8to32+0xa0>)
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20000920 	.word	0x20000920

08001f00 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	72fb      	strb	r3, [r7, #11]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	72bb      	strb	r3, [r7, #10]
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d024      	beq.n	8001f62 <u8x8_d_ssd1322_common+0x62>
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	f300 8081 	bgt.w	8002020 <u8x8_d_ssd1322_common+0x120>
 8001f1e:	2b0b      	cmp	r3, #11
 8001f20:	d002      	beq.n	8001f28 <u8x8_d_ssd1322_common+0x28>
 8001f22:	2b0e      	cmp	r3, #14
 8001f24:	d00d      	beq.n	8001f42 <u8x8_d_ssd1322_common+0x42>
 8001f26:	e07b      	b.n	8002020 <u8x8_d_ssd1322_common+0x120>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <u8x8_d_ssd1322_common+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 8001f2e:	4940      	ldr	r1, [pc, #256]	; (8002030 <u8x8_d_ssd1322_common+0x130>)
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff fefc 	bl	8001d2e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
      break;
 8001f36:	e075      	b.n	8002024 <u8x8_d_ssd1322_common+0x124>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 8001f38:	493e      	ldr	r1, [pc, #248]	; (8002034 <u8x8_d_ssd1322_common+0x134>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7ff fef7 	bl	8001d2e <u8x8_cad_SendSequence>
      break;
 8001f40:	e070      	b.n	8002024 <u8x8_d_ssd1322_common+0x124>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f7ff fed3 	bl	8001cee <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 8001f48:	21c1      	movs	r1, #193	; 0xc1
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff fe98 	bl	8001c80 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 8001f50:	7abb      	ldrb	r3, [r7, #10]
 8001f52:	4619      	mov	r1, r3
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff fea5 	bl	8001ca4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff fed7 	bl	8001d0e <u8x8_cad_EndTransfer>
      break;
 8001f60:	e060      	b.n	8002024 <u8x8_d_ssd1322_common+0x124>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fec3 	bl	8001cee <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	795b      	ldrb	r3, [r3, #5]
 8001f6c:	77fb      	strb	r3, [r7, #31]
      x *= 2;		// only every 4th col can be addressed
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	77fb      	strb	r3, [r7, #31]
      x += u8x8->x_offset;		
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001f7a:	7ffb      	ldrb	r3, [r7, #31]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	799b      	ldrb	r3, [r3, #6]
 8001f84:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	75fb      	strb	r3, [r7, #23]
    
      
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8001f8c:	2175      	movs	r1, #117	; 0x75
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff fe76 	bl	8001c80 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	4619      	mov	r1, r3
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7ff fe83 	bl	8001ca4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	3307      	adds	r3, #7
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff fe7c 	bl	8001ca4 <u8x8_cad_SendArg>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	791b      	ldrb	r3, [r3, #4]
 8001fb0:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 8001fb8:	2115      	movs	r1, #21
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff fe60 	bl	8001c80 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fe6d 	bl	8001ca4 <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff fe66 	bl	8001ca4 <u8x8_cad_SendArg>

	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 8001fd8:	215c      	movs	r1, #92	; 0x5c
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff fe50 	bl	8001c80 <u8x8_cad_SendCmd>
	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff ff3a 	bl	8001e5c <u8x8_ssd1322_8to32>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	2120      	movs	r1, #32
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fe6a 	bl	8001cc8 <u8x8_cad_SendData>
	  
	  ptr += 8;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	61bb      	str	r3, [r7, #24]
	  x += 2;
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	77fb      	strb	r3, [r7, #31]
	  c--;
 8002000:	7fbb      	ldrb	r3, [r7, #30]
 8002002:	3b01      	subs	r3, #1
 8002004:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 8002006:	7fbb      	ldrb	r3, [r7, #30]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1d5      	bne.n	8001fb8 <u8x8_d_ssd1322_common+0xb8>
	
	//x += 2;
	arg_int--;
 800200c:	7abb      	ldrb	r3, [r7, #10]
 800200e:	3b01      	subs	r3, #1
 8002010:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002012:	7abb      	ldrb	r3, [r7, #10]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1c9      	bne.n	8001fac <u8x8_d_ssd1322_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff fe78 	bl	8001d0e <u8x8_cad_EndTransfer>
      break;
 800201e:	e001      	b.n	8002024 <u8x8_d_ssd1322_common+0x124>
    default:
      return 0;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <u8x8_d_ssd1322_common+0x126>
  }
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	08004e08 	.word	0x08004e08
 8002034:	08004e10 	.word	0x08004e10

08002038 <u8x8_d_ssd1322_nhd_256x64>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	72fb      	strb	r3, [r7, #11]
 8002046:	4613      	mov	r3, r2
 8002048:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800204a:	7afb      	ldrb	r3, [r7, #11]
 800204c:	2b0d      	cmp	r3, #13
 800204e:	d013      	beq.n	8002078 <u8x8_d_ssd1322_nhd_256x64+0x40>
 8002050:	2b0d      	cmp	r3, #13
 8002052:	dc2a      	bgt.n	80020aa <u8x8_d_ssd1322_nhd_256x64+0x72>
 8002054:	2b09      	cmp	r3, #9
 8002056:	d002      	beq.n	800205e <u8x8_d_ssd1322_nhd_256x64+0x26>
 8002058:	2b0a      	cmp	r3, #10
 800205a:	d005      	beq.n	8002068 <u8x8_d_ssd1322_nhd_256x64+0x30>
 800205c:	e025      	b.n	80020aa <u8x8_d_ssd1322_nhd_256x64+0x72>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 800205e:	4919      	ldr	r1, [pc, #100]	; (80020c4 <u8x8_d_ssd1322_nhd_256x64+0x8c>)
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f837 	bl	80020d4 <u8x8_d_helper_display_setup_memory>
      break;
 8002066:	e028      	b.n	80020ba <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f847 	bl	80020fc <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 800206e:	4916      	ldr	r1, [pc, #88]	; (80020c8 <u8x8_d_ssd1322_nhd_256x64+0x90>)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7ff fe5c 	bl	8001d2e <u8x8_cad_SendSequence>
      break;
 8002076:	e020      	b.n	80020ba <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002078:	7abb      	ldrb	r3, [r7, #10]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10a      	bne.n	8002094 <u8x8_d_ssd1322_nhd_256x64+0x5c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 800207e:	4913      	ldr	r1, [pc, #76]	; (80020cc <u8x8_d_ssd1322_nhd_256x64+0x94>)
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fe54 	bl	8001d2e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	7c9a      	ldrb	r2, [r3, #18]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002092:	e012      	b.n	80020ba <u8x8_d_ssd1322_nhd_256x64+0x82>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <u8x8_d_ssd1322_nhd_256x64+0x98>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff fe49 	bl	8001d2e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	7cda      	ldrb	r2, [r3, #19]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80020a8:	e007      	b.n	80020ba <u8x8_d_ssd1322_nhd_256x64+0x82>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 80020aa:	7aba      	ldrb	r2, [r7, #10]
 80020ac:	7af9      	ldrb	r1, [r7, #11]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff ff25 	bl	8001f00 <u8x8_d_ssd1322_common>
 80020b6:	4603      	mov	r3, r0
 80020b8:	e000      	b.n	80020bc <u8x8_d_ssd1322_nhd_256x64+0x84>
  }
  return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	08004e30 	.word	0x08004e30
 80020c8:	08004e48 	.word	0x08004e48
 80020cc:	08004e18 	.word	0x08004e18
 80020d0:	08004e24 	.word	0x08004e24

080020d4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	7c9a      	ldrb	r2, [r3, #18]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695c      	ldr	r4, [r3, #20]
 8002108:	2300      	movs	r3, #0
 800210a:	2200      	movs	r2, #0
 800210c:	2128      	movs	r1, #40	; 0x28
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68dc      	ldr	r4, [r3, #12]
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	2114      	movs	r1, #20
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002120:	2201      	movs	r2, #1
 8002122:	214b      	movs	r1, #75	; 0x4b
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f886 	bl	8002236 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	791b      	ldrb	r3, [r3, #4]
 8002130:	461a      	mov	r2, r3
 8002132:	2129      	movs	r1, #41	; 0x29
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f87e 	bl	8002236 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	214b      	movs	r1, #75	; 0x4b
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f879 	bl	8002236 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	461a      	mov	r2, r3
 800214c:	2129      	movs	r1, #41	; 0x29
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f871 	bl	8002236 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002154:	2201      	movs	r2, #1
 8002156:	214b      	movs	r1, #75	; 0x4b
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f86c 	bl	8002236 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	795b      	ldrb	r3, [r3, #5]
 8002164:	461a      	mov	r2, r3
 8002166:	2129      	movs	r1, #41	; 0x29
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f864 	bl	8002236 <u8x8_gpio_call>
}    
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}

08002176 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002176:	b590      	push	{r4, r7, lr}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	4608      	mov	r0, r1
 8002180:	4611      	mov	r1, r2
 8002182:	461a      	mov	r2, r3
 8002184:	4603      	mov	r3, r0
 8002186:	70fb      	strb	r3, [r7, #3]
 8002188:	460b      	mov	r3, r1
 800218a:	70bb      	strb	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002194:	78bb      	ldrb	r3, [r7, #2]
 8002196:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689c      	ldr	r4, [r3, #8]
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	2201      	movs	r2, #1
 80021aa:	210f      	movs	r1, #15
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	47a0      	blx	r4
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}

080021ba <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80021ba:	b590      	push	{r4, r7, lr}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689c      	ldr	r4, [r3, #8]
 80021c6:	2300      	movs	r3, #0
 80021c8:	2200      	movs	r2, #0
 80021ca:	2109      	movs	r1, #9
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	47a0      	blx	r4
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689c      	ldr	r4, [r3, #8]
 80021e4:	2300      	movs	r3, #0
 80021e6:	2200      	movs	r2, #0
 80021e8:	210a      	movs	r1, #10
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}

080021f6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80021f6:	b590      	push	{r4, r7, lr}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689c      	ldr	r4, [r3, #8]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	2300      	movs	r3, #0
 800220a:	210b      	movs	r1, #11
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	47a0      	blx	r4
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689c      	ldr	r4, [r3, #8]
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	2110      	movs	r1, #16
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	47a0      	blx	r4
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}

08002236 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002236:	b590      	push	{r4, r7, lr}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
 8002242:	4613      	mov	r3, r2
 8002244:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695c      	ldr	r4, [r3, #20]
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	78f9      	ldrb	r1, [r7, #3]
 800224e:	2300      	movs	r3, #0
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	47a0      	blx	r4
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}

0800225c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	72fb      	strb	r3, [r7, #11]
 800226a:	4613      	mov	r3, r2
 800226c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <u8x8_SetupDefaults+0x58>)
 800228e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <u8x8_SetupDefaults+0x58>)
 8002294:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <u8x8_SetupDefaults+0x58>)
 800229a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <u8x8_SetupDefaults+0x58>)
 80022a0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	0800225d 	.word	0x0800225d

080022d8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ffc8 	bl	800227c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff ff58 	bl	80021ba <u8x8_SetupMemory>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800234c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002318:	480d      	ldr	r0, [pc, #52]	; (8002350 <LoopForever+0x6>)
  ldr r1, =_edata
 800231a:	490e      	ldr	r1, [pc, #56]	; (8002354 <LoopForever+0xa>)
  ldr r2, =_sidata
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <LoopForever+0xe>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002330:	4c0b      	ldr	r4, [pc, #44]	; (8002360 <LoopForever+0x16>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800233e:	f7fe fa03 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002342:	f002 f8e9 	bl	8004518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002346:	f7fe f85d 	bl	8000404 <main>

0800234a <LoopForever>:

LoopForever:
    b LoopForever
 800234a:	e7fe      	b.n	800234a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800234c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002358:	08004ec4 	.word	0x08004ec4
  ldr r2, =_sbss
 800235c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002360:	20000944 	.word	0x20000944

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>
	...

08002368 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_Init+0x28>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_Init+0x28>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f931 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	200f      	movs	r0, #15
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7fe f950 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f93b 	bl	800262e <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d0:	f000 f911 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000008 	.word	0x20000008
 8002418:	20000940 	.word	0x20000940

0800241c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000940 	.word	0x20000940

08002434 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff ffee 	bl	800241c <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffde 	bl	800241c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff47 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff5c 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffb0 	bl	800259c <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002656:	e154      	b.n	8002902 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8146 	beq.w	80028fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d005      	beq.n	8002688 <HAL_GPIO_Init+0x40>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d130      	bne.n	80026ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026be:	2201      	movs	r2, #1
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 0201 	and.w	r2, r3, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d017      	beq.n	8002726 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d123      	bne.n	800277a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	08da      	lsrs	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3208      	adds	r2, #8
 8002774:	6939      	ldr	r1, [r7, #16]
 8002776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0203 	and.w	r2, r3, #3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80a0 	beq.w	80028fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027bc:	4b58      	ldr	r3, [pc, #352]	; (8002920 <HAL_GPIO_Init+0x2d8>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a57      	ldr	r2, [pc, #348]	; (8002920 <HAL_GPIO_Init+0x2d8>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b55      	ldr	r3, [pc, #340]	; (8002920 <HAL_GPIO_Init+0x2d8>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027d4:	4a53      	ldr	r2, [pc, #332]	; (8002924 <HAL_GPIO_Init+0x2dc>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	220f      	movs	r2, #15
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027fe:	d019      	beq.n	8002834 <HAL_GPIO_Init+0x1ec>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a49      	ldr	r2, [pc, #292]	; (8002928 <HAL_GPIO_Init+0x2e0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_GPIO_Init+0x1e8>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a48      	ldr	r2, [pc, #288]	; (800292c <HAL_GPIO_Init+0x2e4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00d      	beq.n	800282c <HAL_GPIO_Init+0x1e4>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a47      	ldr	r2, [pc, #284]	; (8002930 <HAL_GPIO_Init+0x2e8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_Init+0x1e0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a46      	ldr	r2, [pc, #280]	; (8002934 <HAL_GPIO_Init+0x2ec>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_GPIO_Init+0x1dc>
 8002820:	2304      	movs	r3, #4
 8002822:	e008      	b.n	8002836 <HAL_GPIO_Init+0x1ee>
 8002824:	2305      	movs	r3, #5
 8002826:	e006      	b.n	8002836 <HAL_GPIO_Init+0x1ee>
 8002828:	2303      	movs	r3, #3
 800282a:	e004      	b.n	8002836 <HAL_GPIO_Init+0x1ee>
 800282c:	2302      	movs	r3, #2
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x1ee>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_GPIO_Init+0x1ee>
 8002834:	2300      	movs	r3, #0
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	f002 0203 	and.w	r2, r2, #3
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	4093      	lsls	r3, r2
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002846:	4937      	ldr	r1, [pc, #220]	; (8002924 <HAL_GPIO_Init+0x2dc>)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002854:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002878:	4a2f      	ldr	r2, [pc, #188]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028a2:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028f6:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	f47f aea3 	bne.w	8002658 <HAL_GPIO_Init+0x10>
  }
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000
 8002928:	48000400 	.word	0x48000400
 800292c:	48000800 	.word	0x48000800
 8002930:	48000c00 	.word	0x48000c00
 8002934:	48001000 	.word	0x48001000
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002958:	e002      	b.n	8002960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002972:	af00      	add	r7, sp, #0
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f001 b823 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 817d 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029a8:	4bbc      	ldr	r3, [pc, #752]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d00c      	beq.n	80029ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029b4:	4bb9      	ldr	r3, [pc, #740]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d15c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x10e>
 80029c0:	4bb6      	ldr	r3, [pc, #728]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d155      	bne.n	8002a7a <HAL_RCC_OscConfig+0x10e>
 80029ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_OscConfig+0x94>
 80029fa:	4ba8      	ldr	r3, [pc, #672]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	e015      	b.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a04:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a18:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a1c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a28:	4b9c      	ldr	r3, [pc, #624]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a30:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a40:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a44:	fab2 f282 	clz	r2, r2
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	f042 0220 	orr.w	r2, r2, #32
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f002 021f 	and.w	r2, r2, #31
 8002a54:	2101      	movs	r1, #1
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 811f 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x334>
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 8116 	bne.w	8002ca0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f000 bfaf 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x12e>
 8002a8c:	4b83      	ldr	r3, [pc, #524]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a82      	ldr	r2, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e036      	b.n	8002b08 <HAL_RCC_OscConfig+0x19c>
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x158>
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7b      	ldr	r2, [pc, #492]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b79      	ldr	r3, [pc, #484]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a78      	ldr	r2, [pc, #480]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e021      	b.n	8002b08 <HAL_RCC_OscConfig+0x19c>
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x184>
 8002ad6:	4b71      	ldr	r3, [pc, #452]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a70      	ldr	r2, [pc, #448]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b6e      	ldr	r3, [pc, #440]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6d      	ldr	r2, [pc, #436]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x19c>
 8002af0:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a69      	ldr	r2, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b67      	ldr	r3, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a66      	ldr	r2, [pc, #408]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b06:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b08:	4b64      	ldr	r3, [pc, #400]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f023 020f 	bic.w	r2, r3, #15
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	495f      	ldr	r1, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d059      	beq.n	8002be6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7ff fc73 	bl	800241c <HAL_GetTick>
 8002b36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fc6e 	bl	800241c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d902      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	f000 bf43 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
 8002b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b56:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x218>
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e015      	b.n	8002bb0 <HAL_RCC_OscConfig+0x244>
 8002b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ba0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bb8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bc4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ab      	beq.n	8002b3c <HAL_RCC_OscConfig+0x1d0>
 8002be4:	e05d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7ff fc19 	bl	800241c <HAL_GetTick>
 8002bea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7ff fc14 	bl	800241c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b64      	cmp	r3, #100	; 0x64
 8002bfe:	d902      	bls.n	8002c06 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	f000 bee9 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
 8002c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2cc>
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	e015      	b.n	8002c64 <HAL_RCC_OscConfig+0x2f8>
 8002c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c50:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCC_OscConfig+0x330>)
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c68:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c6c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c70:	fa92 f2a2 	rbit	r2, r2
 8002c74:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c78:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0220 	orr.w	r2, r2, #32
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ab      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x284>
 8002c98:	e003      	b.n	8002ca2 <HAL_RCC_OscConfig+0x336>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 817d 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cb8:	4ba6      	ldr	r3, [pc, #664]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cc4:	4ba3      	ldr	r3, [pc, #652]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d172      	bne.n	8002db6 <HAL_RCC_OscConfig+0x44a>
 8002cd0:	4ba0      	ldr	r3, [pc, #640]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d16c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x44a>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0x3a0>
 8002d06:	4b93      	ldr	r3, [pc, #588]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e013      	b.n	8002d34 <HAL_RCC_OscConfig+0x3c8>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d30:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	2202      	movs	r2, #2
 8002d36:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d46:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f002 021f 	and.w	r2, r2, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCC_OscConfig+0x410>
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f000 be2e 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b75      	ldr	r3, [pc, #468]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	21f8      	movs	r1, #248	; 0xf8
 8002d92:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d9a:	fa91 f1a1 	rbit	r1, r1
 8002d9e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002da2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002da6:	fab1 f181 	clz	r1, r1
 8002daa:	b2c9      	uxtb	r1, r1
 8002dac:	408b      	lsls	r3, r1
 8002dae:	4969      	ldr	r1, [pc, #420]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db4:	e0fd      	b.n	8002fb2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8088 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x56c>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002dda:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	2301      	movs	r3, #1
 8002df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7ff fb12 	bl	800241c <HAL_GetTick>
 8002df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7ff fb0d 	bl	800241c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	f000 bde2 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
 8002e14:	2302      	movs	r3, #2
 8002e16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_OscConfig+0x4d8>
 8002e3e:	4b45      	ldr	r3, [pc, #276]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e013      	b.n	8002e6c <HAL_RCC_OscConfig+0x500>
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e56:	2302      	movs	r3, #2
 8002e58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e68:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e76:	fa92 f2a2 	rbit	r2, r2
 8002e7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e82:	fab2 f282 	clz	r2, r2
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	f042 0220 	orr.w	r2, r2, #32
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	f002 021f 	and.w	r2, r2, #31
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0af      	beq.n	8002dfe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	21f8      	movs	r1, #248	; 0xf8
 8002eb4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ebc:	fa91 f1a1 	rbit	r1, r1
 8002ec0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ec4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ec8:	fab1 f181 	clz	r1, r1
 8002ecc:	b2c9      	uxtb	r1, r1
 8002ece:	408b      	lsls	r3, r1
 8002ed0:	4920      	ldr	r1, [pc, #128]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
 8002ed6:	e06c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x646>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	2300      	movs	r3, #0
 8002f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff fa8a 	bl	800241c <HAL_GetTick>
 8002f08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7ff fa85 	bl	800241c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d902      	bls.n	8002f24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	f000 bd5a 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d104      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5ec>
 8002f4e:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <HAL_RCC_OscConfig+0x5e8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e015      	b.n	8002f80 <HAL_RCC_OscConfig+0x614>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f7c:	4bc8      	ldr	r3, [pc, #800]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2202      	movs	r2, #2
 8002f82:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f86:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f8a:	fa92 f2a2 	rbit	r2, r2
 8002f8e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f96:	fab2 f282 	clz	r2, r2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f042 0220 	orr.w	r2, r2, #32
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f002 021f 	and.w	r2, r2, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ad      	bne.n	8002f0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8110 	beq.w	80031e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d079      	beq.n	80030cc <HAL_RCC_OscConfig+0x760>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4bab      	ldr	r3, [pc, #684]	; (80032a4 <HAL_RCC_OscConfig+0x938>)
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2301      	movs	r3, #1
 8003000:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7ff fa0b 	bl	800241c <HAL_GetTick>
 8003006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300c:	f7ff fa06 	bl	800241c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d902      	bls.n	8003022 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	f000 bcdb 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
 8003022:	2302      	movs	r3, #2
 8003024:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003060:	2202      	movs	r2, #2
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	fa93 f2a3 	rbit	r2, r3
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800307a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 800307e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003088:	2102      	movs	r1, #2
 800308a:	6019      	str	r1, [r3, #0]
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f1a3 	rbit	r1, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030a2:	6019      	str	r1, [r3, #0]
  return result;
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0a0      	beq.n	800300c <HAL_RCC_OscConfig+0x6a0>
 80030ca:	e08d      	b.n	80031e8 <HAL_RCC_OscConfig+0x87c>
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030ee:	601a      	str	r2, [r3, #0]
  return result;
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x938>)
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	2300      	movs	r3, #0
 800310c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7ff f985 	bl	800241c <HAL_GetTick>
 8003112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003118:	f7ff f980 	bl	800241c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d902      	bls.n	800312e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	f000 bc55 	b.w	80039d8 <HAL_RCC_OscConfig+0x106c>
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800315a:	2202      	movs	r2, #2
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800317e:	2202      	movs	r2, #2
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003198:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 800319c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031a6:	2102      	movs	r1, #2
 80031a8:	6019      	str	r1, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fa93 f1a3 	rbit	r1, r3
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031c0:	6019      	str	r1, [r3, #0]
  return result;
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d197      	bne.n	8003118 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 81a1 	beq.w	8003540 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003204:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321a:	61d3      	str	r3, [r2, #28]
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003236:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCC_OscConfig+0x93c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11a      	bne.n	8003280 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_RCC_OscConfig+0x93c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <HAL_RCC_OscConfig+0x93c>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003254:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003256:	f7ff f8e1 	bl	800241c <HAL_GetTick>
 800325a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	e009      	b.n	8003274 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7ff f8dc 	bl	800241c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b64      	cmp	r3, #100	; 0x64
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e3b1      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_RCC_OscConfig+0x93c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ef      	beq.n	8003260 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10d      	bne.n	80032ac <HAL_RCC_OscConfig+0x940>
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4a02      	ldr	r2, [pc, #8]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6213      	str	r3, [r2, #32]
 800329c:	e03c      	b.n	8003318 <HAL_RCC_OscConfig+0x9ac>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	10908120 	.word	0x10908120
 80032a8:	40007000 	.word	0x40007000
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCC_OscConfig+0x96a>
 80032bc:	4bc1      	ldr	r3, [pc, #772]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4ac0      	ldr	r2, [pc, #768]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6213      	str	r3, [r2, #32]
 80032c8:	4bbe      	ldr	r3, [pc, #760]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4abd      	ldr	r2, [pc, #756]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032ce:	f023 0304 	bic.w	r3, r3, #4
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e020      	b.n	8003318 <HAL_RCC_OscConfig+0x9ac>
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	d10c      	bne.n	8003300 <HAL_RCC_OscConfig+0x994>
 80032e6:	4bb7      	ldr	r3, [pc, #732]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4ab6      	ldr	r2, [pc, #728]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	6213      	str	r3, [r2, #32]
 80032f2:	4bb4      	ldr	r3, [pc, #720]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4ab3      	ldr	r2, [pc, #716]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	e00b      	b.n	8003318 <HAL_RCC_OscConfig+0x9ac>
 8003300:	4bb0      	ldr	r3, [pc, #704]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4aaf      	ldr	r2, [pc, #700]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	4bad      	ldr	r3, [pc, #692]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4aac      	ldr	r2, [pc, #688]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 8003312:	f023 0304 	bic.w	r3, r3, #4
 8003316:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8081 	beq.w	800342c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7ff f877 	bl	800241c <HAL_GetTick>
 800332e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7ff f872 	bl	800241c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e345      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003354:	2202      	movs	r2, #2
 8003356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003378:	2202      	movs	r2, #2
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003392:	601a      	str	r2, [r3, #0]
  return result;
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800339c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_OscConfig+0xa4c>
 80033b2:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	e013      	b.n	80033e0 <HAL_RCC_OscConfig+0xa74>
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033c0:	2202      	movs	r2, #2
 80033c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	fa93 f2a3 	rbit	r2, r3
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033e8:	2102      	movs	r1, #2
 80033ea:	6011      	str	r1, [r2, #0]
 80033ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	fa92 f1a2 	rbit	r1, r2
 80033fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003402:	6011      	str	r1, [r2, #0]
  return result;
 8003404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003408:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	fab2 f282 	clz	r2, r2
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f002 021f 	and.w	r2, r2, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f202 	lsl.w	r2, r1, r2
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d084      	beq.n	8003334 <HAL_RCC_OscConfig+0x9c8>
 800342a:	e07f      	b.n	800352c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fe fff6 	bl	800241c <HAL_GetTick>
 8003430:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fe fff1 	bl	800241c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e2c4      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
 800344e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003452:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003456:	2202      	movs	r2, #2
 8003458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800347a:	2202      	movs	r2, #2
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003494:	601a      	str	r2, [r3, #0]
  return result;
 8003496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800349e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d102      	bne.n	80034ba <HAL_RCC_OscConfig+0xb4e>
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	e013      	b.n	80034e2 <HAL_RCC_OscConfig+0xb76>
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034c2:	2202      	movs	r2, #2
 80034c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	fa93 f2a3 	rbit	r2, r3
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034ea:	2102      	movs	r1, #2
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	fa92 f1a2 	rbit	r1, r2
 80034fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003500:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003504:	6011      	str	r1, [r2, #0]
  return result;
 8003506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d184      	bne.n	8003436 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800352c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8242 	beq.w	80039d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_RCC_OscConfig+0xc58>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	f000 8213 	beq.w	8003986 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b02      	cmp	r3, #2
 800356e:	f040 8162 	bne.w	8003836 <HAL_RCC_OscConfig+0xeca>
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800357a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003596:	601a      	str	r2, [r3, #0]
  return result;
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe ff30 	bl	800241c <HAL_GetTick>
 80035bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	e00c      	b.n	80035dc <HAL_RCC_OscConfig+0xc70>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe ff28 	bl	800241c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1fd      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003600:	601a      	str	r2, [r3, #0]
  return result;
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800360a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0xcba>
 8003620:	4bb0      	ldr	r3, [pc, #704]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	e027      	b.n	8003676 <HAL_RCC_OscConfig+0xd0a>
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800362e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	fa93 f2a3 	rbit	r2, r3
 8003642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003646:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	4b9c      	ldr	r3, [pc, #624]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800367a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800367e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003682:	6011      	str	r1, [r2, #0]
 8003684:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003688:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	fa92 f1a2 	rbit	r1, r2
 8003692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003696:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800369a:	6011      	str	r1, [r2, #0]
  return result;
 800369c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	fab2 f282 	clz	r2, r2
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f042 0220 	orr.w	r2, r2, #32
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f002 021f 	and.w	r2, r2, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d182      	bne.n	80035c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c2:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	430b      	orrs	r3, r1
 80036e4:	497f      	ldr	r1, [pc, #508]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80036f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800370e:	601a      	str	r2, [r3, #0]
  return result;
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003718:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003724:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	461a      	mov	r2, r3
 800372c:	2301      	movs	r3, #1
 800372e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fe74 	bl	800241c <HAL_GetTick>
 8003734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	e009      	b.n	800374e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fe6f 	bl	800241c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e144      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003772:	601a      	str	r2, [r3, #0]
  return result;
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800377c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d102      	bne.n	8003798 <HAL_RCC_OscConfig+0xe2c>
 8003792:	4b54      	ldr	r3, [pc, #336]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e027      	b.n	80037e8 <HAL_RCC_OscConfig+0xe7c>
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	4b3f      	ldr	r3, [pc, #252]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037f4:	6011      	str	r1, [r2, #0]
 80037f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	fa92 f1a2 	rbit	r1, r2
 8003804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003808:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800380c:	6011      	str	r1, [r2, #0]
  return result;
 800380e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003812:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	fab2 f282 	clz	r2, r2
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f042 0220 	orr.w	r2, r2, #32
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	f002 021f 	and.w	r2, r2, #31
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f202 	lsl.w	r2, r1, r2
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d082      	beq.n	800373a <HAL_RCC_OscConfig+0xdce>
 8003834:	e0cf      	b.n	80039d6 <HAL_RCC_OscConfig+0x106a>
 8003836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800383e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003848:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	fa93 f2a3 	rbit	r2, r3
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800385a:	601a      	str	r2, [r3, #0]
  return result;
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003864:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	461a      	mov	r2, r3
 8003878:	2300      	movs	r3, #0
 800387a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe fdce 	bl	800241c <HAL_GetTick>
 8003880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003884:	e009      	b.n	800389a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003886:	f7fe fdc9 	bl	800241c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e09e      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	fa93 f2a3 	rbit	r2, r3
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038be:	601a      	str	r2, [r3, #0]
  return result;
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d104      	bne.n	80038e8 <HAL_RCC_OscConfig+0xf7c>
 80038de:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <HAL_RCC_OscConfig+0xf78>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e029      	b.n	8003938 <HAL_RCC_OscConfig+0xfcc>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	fa93 f2a3 	rbit	r2, r3
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003916:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	fa93 f2a3 	rbit	r2, r3
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <HAL_RCC_OscConfig+0x1078>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800393c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003940:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003944:	6011      	str	r1, [r2, #0]
 8003946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800394a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	fa92 f1a2 	rbit	r1, r2
 8003954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003958:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800395c:	6011      	str	r1, [r2, #0]
  return result;
 800395e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003962:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	fab2 f282 	clz	r2, r2
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	f042 0220 	orr.w	r2, r2, #32
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	f002 021f 	and.w	r2, r2, #31
 8003978:	2101      	movs	r1, #1
 800397a:	fa01 f202 	lsl.w	r2, r1, r2
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d180      	bne.n	8003886 <HAL_RCC_OscConfig+0xf1a>
 8003984:	e027      	b.n	80039d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e01e      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <HAL_RCC_OscConfig+0x1078>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000

080039e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b09e      	sub	sp, #120	; 0x78
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e162      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b90      	ldr	r3, [pc, #576]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d910      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b8d      	ldr	r3, [pc, #564]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	498b      	ldr	r1, [pc, #556]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b89      	ldr	r3, [pc, #548]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e14a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3c:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	497f      	ldr	r1, [pc, #508]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80dc 	beq.w	8003c14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d13c      	bne.n	8003ade <HAL_RCC_ClockConfig+0xf6>
 8003a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a74:	fab3 f383 	clz	r3, r3
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xa6>
 8003a88:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	e00f      	b.n	8003aae <HAL_RCC_ClockConfig+0xc6>
 8003a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aaa:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ab2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ab6:	fa92 f2a2 	rbit	r2, r2
 8003aba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003abe:	fab2 f282 	clz	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f042 0220 	orr.w	r2, r2, #32
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f002 021f 	and.w	r2, r2, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d17b      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0f3      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d13c      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x178>
 8003ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x128>
 8003b0a:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCC_ClockConfig+0x148>
 8003b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b22:	643b      	str	r3, [r7, #64]	; 0x40
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b34:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b38:	fa92 f2a2 	rbit	r2, r2
 8003b3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	f042 0220 	orr.w	r2, r2, #32
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	f002 021f 	and.w	r2, r2, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d13a      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0b2      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
 8003b60:	2302      	movs	r3, #2
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d102      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x1a0>
 8003b82:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	e00d      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x1bc>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	2302      	movs	r3, #2
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	61ba      	str	r2, [r7, #24]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	fa92 f2a2 	rbit	r2, r2
 8003bae:	617a      	str	r2, [r7, #20]
  return result;
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	fab2 f282 	clz	r2, r2
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	f042 0220 	orr.w	r2, r2, #32
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	f002 021f 	and.w	r2, r2, #31
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e079      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	491a      	ldr	r1, [pc, #104]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fe fc1a 	bl	800241c <HAL_GetTick>
 8003be8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fe fc16 	bl	800241c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e061      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d214      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 0207 	bic.w	r2, r3, #7
 8003c2a:	4906      	ldr	r1, [pc, #24]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_RCC_ClockConfig+0x25c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e040      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x2de>
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	491a      	ldr	r1, [pc, #104]	; (8003cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c8a:	f000 f85b 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4601      	mov	r1, r0
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <HAL_RCC_ClockConfig+0x2e8>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c98:	22f0      	movs	r2, #240	; 0xf0
 8003c9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	fa92 f2a2 	rbit	r2, r2
 8003ca2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	40d3      	lsrs	r3, r2
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x2ec>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
 8003cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <HAL_RCC_ClockConfig+0x2f0>)
 8003cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCC_ClockConfig+0x2f4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fb68 	bl	8002394 <HAL_InitTick>
  
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3778      	adds	r7, #120	; 0x78
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08004598 	.word	0x08004598
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	20000004 	.word	0x20000004

08003ce0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8003cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfc:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_RCC_MCOConfig+0x60>)
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <HAL_RCC_MCOConfig+0x60>)
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0c:	6153      	str	r3, [r2, #20]
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_RCC_MCOConfig+0x60>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d24:	f7fe fc90 	bl	8002648 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_MCOConfig+0x60>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_MCOConfig+0x60>)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
}
 8003d38:	bf00      	nop
 8003d3a:	3728      	adds	r7, #40	; 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b08b      	sub	sp, #44	; 0x2c
 8003d48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d002      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x30>
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d003      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x36>
 8003d72:	e03c      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d74:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d76:	623b      	str	r3, [r7, #32]
      break;
 8003d78:	e03c      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	fa92 f2a2 	rbit	r2, r2
 8003d8c:	607a      	str	r2, [r7, #4]
  return result;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	fab2 f282 	clz	r2, r2
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	40d3      	lsrs	r3, r2
 8003d98:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d9e:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	220f      	movs	r2, #15
 8003da8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	fa92 f2a2 	rbit	r2, r2
 8003db0:	60fa      	str	r2, [r7, #12]
  return result;
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	fab2 f282 	clz	r2, r2
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	40d3      	lsrs	r3, r2
 8003dbc:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dbe:	5cd3      	ldrb	r3, [r2, r3]
 8003dc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	e004      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	623b      	str	r3, [r7, #32]
      break;
 8003dec:	e002      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003df0:	623b      	str	r3, [r7, #32]
      break;
 8003df2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	372c      	adds	r7, #44	; 0x2c
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	00f42400 	.word	0x00f42400
 8003e0c:	08004e9c 	.word	0x08004e9c
 8003e10:	08004eac 	.word	0x08004eac
 8003e14:	003d0900 	.word	0x003d0900
 8003e18:	007a1200 	.word	0x007a1200

08003e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e09d      	b.n	8003f6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d009      	beq.n	8003e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fc fbfe 	bl	8000670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e94:	d902      	bls.n	8003e9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e002      	b.n	8003ea2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003eaa:	d007      	beq.n	8003ebc <HAL_SPI_Init+0xa0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	ea42 0103 	orr.w	r1, r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	f003 0204 	and.w	r2, r3, #4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f38:	ea42 0103 	orr.w	r1, r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b088      	sub	sp, #32
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_SPI_Transmit+0x22>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e158      	b.n	8004246 <HAL_SPI_Transmit+0x2d4>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f9c:	f7fe fa3e 	bl	800241c <HAL_GetTick>
 8003fa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb6:	e13d      	b.n	8004234 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_SPI_Transmit+0x52>
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc8:	e134      	b.n	8004234 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d10f      	bne.n	8004036 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d007      	beq.n	8004054 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800405c:	d94b      	bls.n	80040f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0xfa>
 8004066:	8afb      	ldrh	r3, [r7, #22]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d13e      	bne.n	80040ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	881a      	ldrh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004090:	e02b      	b.n	80040ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d112      	bne.n	80040c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040c4:	e011      	b.n	80040ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c6:	f7fe f9a9 	bl	800241c <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d803      	bhi.n	80040de <HAL_SPI_Transmit+0x16c>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040dc:	d102      	bne.n	80040e4 <HAL_SPI_Transmit+0x172>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040e8:	e0a4      	b.n	8004234 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1ce      	bne.n	8004092 <HAL_SPI_Transmit+0x120>
 80040f4:	e07c      	b.n	80041f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_Transmit+0x192>
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d170      	bne.n	80041e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d912      	bls.n	8004134 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	881a      	ldrh	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	1c9a      	adds	r2, r3, #2
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b02      	subs	r3, #2
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004132:	e058      	b.n	80041e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800415a:	e044      	b.n	80041e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d12b      	bne.n	80041c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d912      	bls.n	800419a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	1c9a      	adds	r2, r3, #2
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b02      	subs	r3, #2
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004198:	e025      	b.n	80041e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c0:	e011      	b.n	80041e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c2:	f7fe f92b 	bl	800241c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <HAL_SPI_Transmit+0x268>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Transmit+0x26e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041e4:	e026      	b.n	8004234 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1b5      	bne.n	800415c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	6839      	ldr	r1, [r7, #0]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f949 	bl	800448c <SPI_EndRxTxTransaction>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e000      	b.n	8004234 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004232:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004244:	7ffb      	ldrb	r3, [r7, #31]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004260:	f7fe f8dc 	bl	800241c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	4413      	add	r3, r2
 800426e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004270:	f7fe f8d4 	bl	800241c <HAL_GetTick>
 8004274:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	015b      	lsls	r3, r3, #5
 800427c:	0d1b      	lsrs	r3, r3, #20
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004286:	e054      	b.n	8004332 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428e:	d050      	beq.n	8004332 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004290:	f7fe f8c4 	bl	800241c <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	d902      	bls.n	80042a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d13d      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042be:	d111      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	d004      	beq.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d2:	d107      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ec:	d10f      	bne.n	800430e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e017      	b.n	8004352 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3b01      	subs	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4013      	ands	r3, r2
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	429a      	cmp	r2, r3
 800434e:	d19b      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3720      	adds	r7, #32
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000000 	.word	0x20000000

08004360 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004372:	f7fe f853 	bl	800241c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	4413      	add	r3, r2
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004382:	f7fe f84b 	bl	800241c <HAL_GetTick>
 8004386:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004390:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	00da      	lsls	r2, r3, #3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	0d1b      	lsrs	r3, r3, #20
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043a8:	e060      	b.n	800446c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043b0:	d107      	bne.n	80043c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c8:	d050      	beq.n	800446c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043ca:	f7fe f827 	bl	800241c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d902      	bls.n	80043e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d13d      	bne.n	800445c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f8:	d111      	bne.n	800441e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004402:	d004      	beq.n	800440e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440c:	d107      	bne.n	800441e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	d10f      	bne.n	8004448 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004446:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e010      	b.n	800447e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	3b01      	subs	r3, #1
 800446a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d196      	bne.n	80043aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3728      	adds	r7, #40	; 0x28
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000

0800448c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2200      	movs	r2, #0
 80044a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff ff5b 	bl	8004360 <SPI_WaitFifoStateUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e027      	b.n	8004510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	2180      	movs	r1, #128	; 0x80
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff fec0 	bl	8004250 <SPI_WaitFlagStateUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e014      	b.n	8004510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff ff34 	bl	8004360 <SPI_WaitFifoStateUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e000      	b.n	8004510 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <__libc_init_array>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4d0d      	ldr	r5, [pc, #52]	; (8004550 <__libc_init_array+0x38>)
 800451c:	4c0d      	ldr	r4, [pc, #52]	; (8004554 <__libc_init_array+0x3c>)
 800451e:	1b64      	subs	r4, r4, r5
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	2600      	movs	r6, #0
 8004524:	42a6      	cmp	r6, r4
 8004526:	d109      	bne.n	800453c <__libc_init_array+0x24>
 8004528:	4d0b      	ldr	r5, [pc, #44]	; (8004558 <__libc_init_array+0x40>)
 800452a:	4c0c      	ldr	r4, [pc, #48]	; (800455c <__libc_init_array+0x44>)
 800452c:	f000 f820 	bl	8004570 <_init>
 8004530:	1b64      	subs	r4, r4, r5
 8004532:	10a4      	asrs	r4, r4, #2
 8004534:	2600      	movs	r6, #0
 8004536:	42a6      	cmp	r6, r4
 8004538:	d105      	bne.n	8004546 <__libc_init_array+0x2e>
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004540:	4798      	blx	r3
 8004542:	3601      	adds	r6, #1
 8004544:	e7ee      	b.n	8004524 <__libc_init_array+0xc>
 8004546:	f855 3b04 	ldr.w	r3, [r5], #4
 800454a:	4798      	blx	r3
 800454c:	3601      	adds	r6, #1
 800454e:	e7f2      	b.n	8004536 <__libc_init_array+0x1e>
 8004550:	08004ebc 	.word	0x08004ebc
 8004554:	08004ebc 	.word	0x08004ebc
 8004558:	08004ebc 	.word	0x08004ebc
 800455c:	08004ec0 	.word	0x08004ec0

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <_init>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr

0800457c <_fini>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr
