
f302_nhdinitializer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005040  08005040  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  08005040  08005040  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005040  08005040  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .img_def      00000228  2000000c  08005054  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000938  20000234  0800527c  00020234  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b6c  0800527c  00020b6c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c196  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ef1  00000000  00000000  0004c3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0004f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001128  00000000  00000000  000505c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d70a  00000000  00000000  000516e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011539  00000000  00000000  0006edf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1ba6  00000000  00000000  0008032b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131ed1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e64  00000000  00000000  00131f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046f4 	.word	0x080046f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	080046f4 	.word	0x080046f4

080001c8 <disp_splash>:

extern SPI_HandleTypeDef hspi1;
//extern TIM_HandleTypeDef htim2;
u8g2_t u8g2;

void disp_splash(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <disp_splash+0x28>)
 80001d0:	9301      	str	r3, [sp, #4]
 80001d2:	2318      	movs	r3, #24
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	23b4      	movs	r3, #180	; 0xb4
 80001d8:	2214      	movs	r2, #20
 80001da:	2126      	movs	r1, #38	; 0x26
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <disp_splash+0x2c>)
 80001de:	f000 fb55 	bl	800088c <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_logo_bits);
	u8g2_SendBuffer(&u8g2);
 80001e2:	4804      	ldr	r0, [pc, #16]	; (80001f4 <disp_splash+0x2c>)
 80001e4:	f000 fbea 	bl	80009bc <u8g2_SendBuffer>
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	20000250 	.word	0x20000250

080001f8 <u8x8_stm32_gpio_and_delay>:

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	460b      	mov	r3, r1
 8000204:	72fb      	strb	r3, [r7, #11]
 8000206:	4613      	mov	r3, r2
 8000208:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800020a:	7afb      	ldrb	r3, [r7, #11]
 800020c:	3b28      	subs	r3, #40	; 0x28
 800020e:	2b23      	cmp	r3, #35	; 0x23
 8000210:	d863      	bhi.n	80002da <u8x8_stm32_gpio_and_delay+0xe2>
 8000212:	a201      	add	r2, pc, #4	; (adr r2, 8000218 <u8x8_stm32_gpio_and_delay+0x20>)
 8000214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000218:	080002a9 	.word	0x080002a9
 800021c:	080002b1 	.word	0x080002b1
 8000220:	080002db 	.word	0x080002db
 8000224:	080002db 	.word	0x080002db
 8000228:	080002db 	.word	0x080002db
 800022c:	080002db 	.word	0x080002db
 8000230:	080002db 	.word	0x080002db
 8000234:	080002db 	.word	0x080002db
 8000238:	080002db 	.word	0x080002db
 800023c:	080002db 	.word	0x080002db
 8000240:	080002db 	.word	0x080002db
 8000244:	080002db 	.word	0x080002db
 8000248:	080002db 	.word	0x080002db
 800024c:	080002db 	.word	0x080002db
 8000250:	080002db 	.word	0x080002db
 8000254:	080002db 	.word	0x080002db
 8000258:	080002db 	.word	0x080002db
 800025c:	080002db 	.word	0x080002db
 8000260:	080002db 	.word	0x080002db
 8000264:	080002db 	.word	0x080002db
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002db 	.word	0x080002db
 8000280:	080002db 	.word	0x080002db
 8000284:	080002db 	.word	0x080002db
 8000288:	080002db 	.word	0x080002db
 800028c:	080002db 	.word	0x080002db
 8000290:	080002db 	.word	0x080002db
 8000294:	080002db 	.word	0x080002db
 8000298:	080002db 	.word	0x080002db
 800029c:	080002bb 	.word	0x080002bb
 80002a0:	080002db 	.word	0x080002db
 80002a4:	080002cb 	.word	0x080002cb
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f002 f985 	bl	80025b8 <HAL_Delay>
		break;
 80002ae:	e014      	b.n	80002da <u8x8_stm32_gpio_and_delay+0xe2>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 80002b0:	7abb      	ldrb	r3, [r7, #10]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f980 	bl	80025b8 <HAL_Delay>
		break;
 80002b8:	e00f      	b.n	80002da <u8x8_stm32_gpio_and_delay+0xe2>
	case U8X8_MSG_GPIO_CS:				// CS (chip select) pin: Output level in arg_int
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
 80002ba:	7abb      	ldrb	r3, [r7, #10]
 80002bc:	461a      	mov	r2, r3
 80002be:	2110      	movs	r1, #16
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c4:	f002 fbfc 	bl	8002ac0 <HAL_GPIO_WritePin>
		break;
 80002c8:	e007      	b.n	80002da <u8x8_stm32_gpio_and_delay+0xe2>
	case U8X8_MSG_GPIO_DC:
		break;
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(SPI1_RES_GPIO_Port, SPI1_RES_Pin, arg_int);
 80002ca:	7abb      	ldrb	r3, [r7, #10]
 80002cc:	461a      	mov	r2, r3
 80002ce:	2108      	movs	r1, #8
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f002 fbf4 	bl	8002ac0 <HAL_GPIO_WritePin>
		break;
 80002d8:	bf00      	nop
	}
	return 1;
 80002da:	2301      	movs	r3, #1
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <u8x8_byte_3wire_hw_spi>:

uint8_t u8x8_byte_3wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	460b      	mov	r3, r1
 80002f0:	72fb      	strb	r3, [r7, #11]
 80002f2:	4613      	mov	r3, r2
 80002f4:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80002f6:	7afb      	ldrb	r3, [r7, #11]
 80002f8:	3b14      	subs	r3, #20
 80002fa:	2b0c      	cmp	r3, #12
 80002fc:	d847      	bhi.n	800038e <u8x8_byte_3wire_hw_spi+0xaa>
 80002fe:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <u8x8_byte_3wire_hw_spi+0x20>)
 8000300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000304:	0800034b 	.word	0x0800034b
 8000308:	0800038f 	.word	0x0800038f
 800030c:	0800038f 	.word	0x0800038f
 8000310:	08000339 	.word	0x08000339
 8000314:	0800036b 	.word	0x0800036b
 8000318:	0800037d 	.word	0x0800037d
 800031c:	0800038f 	.word	0x0800038f
 8000320:	0800038f 	.word	0x0800038f
 8000324:	0800038f 	.word	0x0800038f
 8000328:	0800038f 	.word	0x0800038f
 800032c:	0800038f 	.word	0x0800038f
 8000330:	0800038f 	.word	0x0800038f
 8000334:	0800035d 	.word	0x0800035d
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000338:	7abb      	ldrb	r3, [r7, #10]
 800033a:	b29a      	uxth	r2, r3
 800033c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	4816      	ldr	r0, [pc, #88]	; (800039c <u8x8_byte_3wire_hw_spi+0xb8>)
 8000344:	f003 fed7 	bl	80040f6 <HAL_SPI_Transmit>
		break;
 8000348:	e023      	b.n	8000392 <u8x8_byte_3wire_hw_spi+0xae>
	case U8X8_MSG_BYTE_INIT:
		 u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	461a      	mov	r2, r3
 8000352:	2149      	movs	r1, #73	; 0x49
 8000354:	68f8      	ldr	r0, [r7, #12]
 8000356:	f002 f830 	bl	80023ba <u8x8_gpio_call>
		//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
		break;
 800035a:	e01a      	b.n	8000392 <u8x8_byte_3wire_hw_spi+0xae>
	case U8X8_MSG_BYTE_SET_DC:

		u8x8_gpio_SetDC(u8x8, arg_int);
 800035c:	7abb      	ldrb	r3, [r7, #10]
 800035e:	461a      	mov	r2, r3
 8000360:	214a      	movs	r1, #74	; 0x4a
 8000362:	68f8      	ldr	r0, [r7, #12]
 8000364:	f002 f829 	bl	80023ba <u8x8_gpio_call>
		break;
 8000368:	e013      	b.n	8000392 <u8x8_byte_3wire_hw_spi+0xae>
	case U8X8_MSG_BYTE_START_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	2149      	movs	r1, #73	; 0x49
 8000374:	68f8      	ldr	r0, [r7, #12]
 8000376:	f002 f820 	bl	80023ba <u8x8_gpio_call>
		//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
		break;
 800037a:	e00a      	b.n	8000392 <u8x8_byte_3wire_hw_spi+0xae>
	case U8X8_MSG_BYTE_END_TRANSFER:
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	785b      	ldrb	r3, [r3, #1]
 8000382:	461a      	mov	r2, r3
 8000384:	2149      	movs	r1, #73	; 0x49
 8000386:	68f8      	ldr	r0, [r7, #12]
 8000388:	f002 f817 	bl	80023ba <u8x8_gpio_call>
		//HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, arg_int);
		break;
 800038c:	e001      	b.n	8000392 <u8x8_byte_3wire_hw_spi+0xae>
	default:
		return 0;
 800038e:	2300      	movs	r3, #0
 8000390:	e000      	b.n	8000394 <u8x8_byte_3wire_hw_spi+0xb0>
	}
	return 1;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200002e4 	.word	0x200002e4

080003a0 <start_app>:
void start_app(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BC1_GPIO_Port, LED_BC1_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003aa:	4818      	ldr	r0, [pc, #96]	; (800040c <start_app+0x6c>)
 80003ac:	f002 fb88 	bl	8002ac0 <HAL_GPIO_WritePin>
//	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, OPTIMAL_BL);
	u8g2_Setup_ssd1322_nhd_256x64_f(&u8g2, U8G2_R2, u8x8_byte_3wire_hw_spi, u8x8_stm32_gpio_and_delay);
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <start_app+0x70>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <start_app+0x74>)
 80003b4:	4918      	ldr	r1, [pc, #96]	; (8000418 <start_app+0x78>)
 80003b6:	4819      	ldr	r0, [pc, #100]	; (800041c <start_app+0x7c>)
 80003b8:	f000 fb1e 	bl	80009f8 <u8g2_Setup_ssd1322_nhd_256x64_f>


	u8g2_InitDisplay(&u8g2);
 80003bc:	4817      	ldr	r0, [pc, #92]	; (800041c <start_app+0x7c>)
 80003be:	f001 ffcd 	bl	800235c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80003c2:	2100      	movs	r1, #0
 80003c4:	4815      	ldr	r0, [pc, #84]	; (800041c <start_app+0x7c>)
 80003c6:	f001 ffd8 	bl	800237a <u8x8_SetPowerSave>

	//set_contrast(OPTIMAL_CONTRAST);

	u8g2_SetBitmapMode(&u8g2,0);
 80003ca:	2100      	movs	r1, #0
 80003cc:	4813      	ldr	r0, [pc, #76]	; (800041c <start_app+0x7c>)
 80003ce:	f000 f9df 	bl	8000790 <u8g2_SetBitmapMode>


	u8g2_SetDrawColor(&u8g2, 1);
 80003d2:	2101      	movs	r1, #1
 80003d4:	4811      	ldr	r0, [pc, #68]	; (800041c <start_app+0x7c>)
 80003d6:	f001 fa05 	bl	80017e4 <u8g2_SetDrawColor>
	u8g2_SetFontMode(&u8g2, 0);
 80003da:	2100      	movs	r1, #0
 80003dc:	480f      	ldr	r0, [pc, #60]	; (800041c <start_app+0x7c>)
 80003de:	f000 ff6a 	bl	80012b6 <u8g2_SetFontMode>
	u8g2_SetFontPosTop(&u8g2);
 80003e2:	480e      	ldr	r0, [pc, #56]	; (800041c <start_app+0x7c>)
 80003e4:	f001 f8da 	bl	800159c <u8g2_SetFontPosTop>
		f	The font includes up to 256 glyphs.
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 80003e8:	490d      	ldr	r1, [pc, #52]	; (8000420 <start_app+0x80>)
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <start_app+0x7c>)
 80003ec:	f001 f8e6 	bl	80015bc <u8g2_SetFont>
		//u8g2_SetFont(&u8g2, viafont);
		u8g2_DrawStr(&u8g2, 15, 15, "Hello World!");
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <start_app+0x84>)
 80003f2:	220f      	movs	r2, #15
 80003f4:	210f      	movs	r1, #15
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <start_app+0x7c>)
 80003f8:	f001 f81c 	bl	8001434 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 80003fc:	4807      	ldr	r0, [pc, #28]	; (800041c <start_app+0x7c>)
 80003fe:	f000 fadd 	bl	80009bc <u8g2_SendBuffer>
		disp_splash();
 8000402:	f7ff fee1 	bl	80001c8 <disp_splash>


}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	48000400 	.word	0x48000400
 8000410:	080001f9 	.word	0x080001f9
 8000414:	080002e5 	.word	0x080002e5
 8000418:	08004f80 	.word	0x08004f80
 800041c:	20000250 	.word	0x20000250
 8000420:	0800472c 	.word	0x0800472c
 8000424:	0800470c 	.word	0x0800470c

08000428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800042c:	f002 f85e 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000430:	f000 f808 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000434:	f000 f890 	bl	8000558 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000438:	f000 f850 	bl	80004dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//	HAL_TIM_PWM_Init(&htim2);
//	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
	start_app();
 800043c:	f7ff ffb0 	bl	80003a0 <start_app>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8000440:	bf30      	wfi
 8000442:	e7fd      	b.n	8000440 <main+0x18>

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b090      	sub	sp, #64	; 0x40
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0318 	add.w	r3, r7, #24
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f004 f946 	bl	80046e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000466:	2301      	movs	r3, #1
 8000468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000470:	2301      	movs	r3, #1
 8000472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000478:	2302      	movs	r3, #2
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000482:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000486:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fb2f 	bl	8002af0 <HAL_RCC_OscConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000498:	f000 f8d2 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	230f      	movs	r3, #15
 800049e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a0:	2302      	movs	r3, #2
 80004a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2102      	movs	r1, #2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fb58 	bl	8003b6c <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004c2:	f000 f8bd 	bl	8000640 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80004cc:	2000      	movs	r0, #0
 80004ce:	f003 fcc9 	bl	8003e64 <HAL_RCC_MCOConfig>
}
 80004d2:	bf00      	nop
 80004d4:	3740      	adds	r7, #64	; 0x40
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_SPI1_Init+0x74>)
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <MX_SPI1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_SPI1_Init+0x74>)
 80004e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_SPI1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_SPI1_Init+0x74>)
 80004f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_SPI1_Init+0x74>)
 80004fe:	2202      	movs	r2, #2
 8000500:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_SPI1_Init+0x74>)
 8000504:	2201      	movs	r2, #1
 8000506:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_SPI1_Init+0x74>)
 800050a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800050e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_SPI1_Init+0x74>)
 8000512:	2218      	movs	r2, #24
 8000514:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_SPI1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_SPI1_Init+0x74>)
 800052a:	2207      	movs	r2, #7
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_SPI1_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_SPI1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_SPI1_Init+0x74>)
 800053c:	f003 fd30 	bl	8003fa0 <HAL_SPI_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f87b 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200002e4 	.word	0x200002e4
 8000554:	40013000 	.word	0x40013000

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b32      	ldr	r3, [pc, #200]	; (8000638 <MX_GPIO_Init+0xe0>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a31      	ldr	r2, [pc, #196]	; (8000638 <MX_GPIO_Init+0xe0>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b2f      	ldr	r3, [pc, #188]	; (8000638 <MX_GPIO_Init+0xe0>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <MX_GPIO_Init+0xe0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a2b      	ldr	r2, [pc, #172]	; (8000638 <MX_GPIO_Init+0xe0>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_GPIO_Init+0xe0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_GPIO_Init+0xe0>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a25      	ldr	r2, [pc, #148]	; (8000638 <MX_GPIO_Init+0xe0>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_GPIO_Init+0xe0>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RES_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2118      	movs	r1, #24
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f002 fa7f 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BC1_GPIO_Port, LED_BC1_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	481c      	ldr	r0, [pc, #112]	; (800063c <MX_GPIO_Init+0xe4>)
 80005ca:	f002 fa79 	bl	8002ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_RES_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RES_Pin|SPI1_CS_Pin;
 80005ce:	2318      	movs	r3, #24
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f002 f8f0 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BC1_Pin */
  GPIO_InitStruct.Pin = LED_BC1_Pin;
 80005ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_BC1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_GPIO_Init+0xe4>)
 8000606:	f002 f8e1 	bl	80027cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f002 f8cf 	bl	80027cc <HAL_GPIO_Init>

}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	48000400 	.word	0x48000400

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x44>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a17      	ldr	r2, [pc, #92]	; (8000710 <HAL_SPI_MspInit+0x7c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d128      	bne.n	8000708 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_SPI_MspInit+0x80>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006e6:	23a0      	movs	r3, #160	; 0xa0
 80006e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f6:	2305      	movs	r3, #5
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f002 f862 	bl	80027cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40013000 	.word	0x40013000
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f001 ff08 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x20>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <SystemInit+0x20>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	78fa      	ldrb	r2, [r7, #3]
 80007a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af02      	add	r7, sp, #8
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4603      	mov	r3, r0
 80007c0:	817b      	strh	r3, [r7, #10]
 80007c2:	460b      	mov	r3, r1
 80007c4:	813b      	strh	r3, [r7, #8]
 80007c6:	4613      	mov	r3, r2
 80007c8:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80007d0:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80007d2:	7dbb      	ldrb	r3, [r7, #22]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80007e0:	897a      	ldrh	r2, [r7, #10]
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	4413      	add	r3, r2
 80007e6:	b298      	uxth	r0, r3
 80007e8:	893b      	ldrh	r3, [r7, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	893a      	ldrh	r2, [r7, #8]
 80007f0:	8979      	ldrh	r1, [r7, #10]
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	4603      	mov	r3, r0
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f001 f83e 	bl	8001878 <u8g2_IsIntersection>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d040      	beq.n	8000884 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8000806:	e035      	b.n	8000874 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	7dfb      	ldrb	r3, [r7, #23]
 800080e:	4013      	ands	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00c      	beq.n	8000830 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	7dba      	ldrb	r2, [r7, #22]
 800081a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800081e:	893a      	ldrh	r2, [r7, #8]
 8000820:	8979      	ldrh	r1, [r7, #10]
 8000822:	2300      	movs	r3, #0
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f000 ff50 	bl	80016ce <u8g2_DrawHVLine>
 800082e:	e010      	b.n	8000852 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10b      	bne.n	8000852 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	7d7a      	ldrb	r2, [r7, #21]
 800083e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000842:	893a      	ldrh	r2, [r7, #8]
 8000844:	8979      	ldrh	r1, [r7, #10]
 8000846:	2300      	movs	r3, #0
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f000 ff3e 	bl	80016ce <u8g2_DrawHVLine>
    }
    x++;
 8000852:	897b      	ldrh	r3, [r7, #10]
 8000854:	3301      	adds	r3, #1
 8000856:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d104      	bne.n	800086e <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
      b++;
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	3301      	adds	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
    }
    len--;
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	3b01      	subs	r3, #1
 8000872:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1c6      	bne.n	8000808 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	7dba      	ldrb	r2, [r7, #22]
 800087e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8000882:	e000      	b.n	8000886 <u8g2_DrawHXBM+0xd6>
    return;
 8000884:	bf00      	nop
}
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af02      	add	r7, sp, #8
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	4608      	mov	r0, r1
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	4603      	mov	r3, r0
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	460b      	mov	r3, r1
 80008a0:	813b      	strh	r3, [r7, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80008aa:	8afb      	ldrh	r3, [r7, #22]
 80008ac:	3307      	adds	r3, #7
 80008ae:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 80008b0:	8afb      	ldrh	r3, [r7, #22]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80008b6:	897a      	ldrh	r2, [r7, #10]
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	4413      	add	r3, r2
 80008bc:	b298      	uxth	r0, r3
 80008be:	893a      	ldrh	r2, [r7, #8]
 80008c0:	8c3b      	ldrh	r3, [r7, #32]
 80008c2:	4413      	add	r3, r2
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	893a      	ldrh	r2, [r7, #8]
 80008c8:	8979      	ldrh	r1, [r7, #10]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4603      	mov	r3, r0
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f000 ffd2 	bl	8001878 <u8g2_IsIntersection>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d017      	beq.n	800090a <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80008da:	e012      	b.n	8000902 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80008dc:	88f8      	ldrh	r0, [r7, #6]
 80008de:	893a      	ldrh	r2, [r7, #8]
 80008e0:	8979      	ldrh	r1, [r7, #10]
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	4603      	mov	r3, r0
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff ff61 	bl	80007b0 <u8g2_DrawHXBM>
    bitmap += blen;
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f2:	4413      	add	r3, r2
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 80008f6:	893b      	ldrh	r3, [r7, #8]
 80008f8:	3301      	adds	r3, #1
 80008fa:	813b      	strh	r3, [r7, #8]
    h--;
 80008fc:	8c3b      	ldrh	r3, [r7, #32]
 80008fe:	3b01      	subs	r3, #1
 8000900:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000902:	8c3b      	ldrh	r3, [r7, #32]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1e9      	bne.n	80008dc <u8g2_DrawXBM+0x50>
 8000908:	e000      	b.n	800090c <u8g2_DrawXBM+0x80>
    return;
 800090a:	bf00      	nop
  }
}
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af02      	add	r7, sp, #8
 8000918:	6078      	str	r0, [r7, #4]
 800091a:	460b      	mov	r3, r1
 800091c:	70fb      	strb	r3, [r7, #3]
 800091e:	4613      	mov	r3, r2
 8000920:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	7c1b      	ldrb	r3, [r3, #16]
 8000928:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000932:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	b29b      	uxth	r3, r3
 8000938:	89ba      	ldrh	r2, [r7, #12]
 800093a:	fb12 f303 	smulbb	r3, r2, r3
 800093e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000940:	89bb      	ldrh	r3, [r7, #12]
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000946:	89bb      	ldrh	r3, [r7, #12]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	4413      	add	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800094e:	7bf9      	ldrb	r1, [r7, #15]
 8000950:	78ba      	ldrb	r2, [r7, #2]
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	460b      	mov	r3, r1
 8000958:	2100      	movs	r1, #0
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f001 fccd 	bl	80022fa <u8x8_DrawTile>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800097a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000982:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	7c5b      	ldrb	r3, [r3, #17]
 800098a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800098c:	7bba      	ldrb	r2, [r7, #14]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	4619      	mov	r1, r3
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffbd 	bl	8000912 <u8g2_send_tile_row>
    src_row++;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	3301      	adds	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800099e:	7bbb      	ldrb	r3, [r7, #14]
 80009a0:	3301      	adds	r3, #1
 80009a2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	7b7b      	ldrb	r3, [r7, #13]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d203      	bcs.n	80009b4 <u8g2_send_buffer+0x4c>
 80009ac:	7bba      	ldrb	r2, [r7, #14]
 80009ae:	7b3b      	ldrb	r3, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d3eb      	bcc.n	800098c <u8g2_send_buffer+0x24>
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ffcf 	bl	8000968 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f001 fce6 	bl	800239c <u8x8_RefreshDisplay>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <u8g2_m_32_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_32_8_f(uint8_t *page_cnt)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[2048];
  *page_cnt = 8;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2208      	movs	r2, #8
 80009e4:	701a      	strb	r2, [r3, #0]
  return buf;
 80009e6:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <u8g2_m_32_8_f+0x1c>)
  #endif
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000348 	.word	0x20000348

080009f8 <u8g2_Setup_ssd1322_nhd_256x64_f>:
  buf = u8g2_m_32_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1322 f */
void u8g2_Setup_ssd1322_nhd_256x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <u8g2_Setup_ssd1322_nhd_256x64_f+0x44>)
 8000a0e:	490c      	ldr	r1, [pc, #48]	; (8000a40 <u8g2_Setup_ssd1322_nhd_256x64_f+0x48>)
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f001 fd23 	bl	800245c <u8x8_Setup>
  buf = u8g2_m_32_8_f(&tile_buf_height);
 8000a16:	f107 0313 	add.w	r3, r7, #19
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffdc 	bl	80009d8 <u8g2_m_32_8_f>
 8000a20:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000a22:	7cfa      	ldrb	r2, [r7, #19]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <u8g2_Setup_ssd1322_nhd_256x64_f+0x4c>)
 8000a2a:	6979      	ldr	r1, [r7, #20]
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f001 f80d 	bl	8001a4c <u8g2_SetupBuffer>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08001f59 	.word	0x08001f59
 8000a40:	080021bd 	.word	0x080021bd
 8000a44:	080018cf 	.word	0x080018cf

08000a48 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	81fb      	strh	r3, [r7, #14]
    font++;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	81fb      	strh	r3, [r7, #14]
    return pos;
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	6838      	ldr	r0, [r7, #0]
 8000aba:	f7ff ffc5 	bl	8000a48 <u8g2_font_get_byte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f7ff ffbd 	bl	8000a48 <u8g2_font_get_byte>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	6838      	ldr	r0, [r7, #0]
 8000ada:	f7ff ffb5 	bl	8000a48 <u8g2_font_get_byte>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f7ff ffad 	bl	8000a48 <u8g2_font_get_byte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8000af6:	2104      	movs	r1, #4
 8000af8:	6838      	ldr	r0, [r7, #0]
 8000afa:	f7ff ffa5 	bl	8000a48 <u8g2_font_get_byte>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8000b06:	2105      	movs	r1, #5
 8000b08:	6838      	ldr	r0, [r7, #0]
 8000b0a:	f7ff ff9d 	bl	8000a48 <u8g2_font_get_byte>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8000b16:	2106      	movs	r1, #6
 8000b18:	6838      	ldr	r0, [r7, #0]
 8000b1a:	f7ff ff95 	bl	8000a48 <u8g2_font_get_byte>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8000b26:	2107      	movs	r1, #7
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	f7ff ff8d 	bl	8000a48 <u8g2_font_get_byte>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8000b36:	2108      	movs	r1, #8
 8000b38:	6838      	ldr	r0, [r7, #0]
 8000b3a:	f7ff ff85 	bl	8000a48 <u8g2_font_get_byte>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8000b46:	2109      	movs	r1, #9
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff ff7d 	bl	8000a48 <u8g2_font_get_byte>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8000b56:	210a      	movs	r1, #10
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	f7ff ff75 	bl	8000a48 <u8g2_font_get_byte>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8000b66:	210b      	movs	r1, #11
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f7ff ff6d 	bl	8000a48 <u8g2_font_get_byte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8000b76:	210c      	movs	r1, #12
 8000b78:	6838      	ldr	r0, [r7, #0]
 8000b7a:	f7ff ff65 	bl	8000a48 <u8g2_font_get_byte>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8000b86:	210d      	movs	r1, #13
 8000b88:	6838      	ldr	r0, [r7, #0]
 8000b8a:	f7ff ff5d 	bl	8000a48 <u8g2_font_get_byte>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8000b96:	210e      	movs	r1, #14
 8000b98:	6838      	ldr	r0, [r7, #0]
 8000b9a:	f7ff ff55 	bl	8000a48 <u8g2_font_get_byte>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b25a      	sxtb	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	6838      	ldr	r0, [r7, #0]
 8000baa:	f7ff ff4d 	bl	8000a48 <u8g2_font_get_byte>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b25a      	sxtb	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	6838      	ldr	r0, [r7, #0]
 8000bba:	f7ff ff45 	bl	8000a48 <u8g2_font_get_byte>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b25a      	sxtb	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8000bc6:	2111      	movs	r1, #17
 8000bc8:	6838      	ldr	r0, [r7, #0]
 8000bca:	f7ff ff4f 	bl	8000a6c <u8g2_font_get_word>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8000bd6:	2113      	movs	r1, #19
 8000bd8:	6838      	ldr	r0, [r7, #0]
 8000bda:	f7ff ff47 	bl	8000a6c <u8g2_font_get_word>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8000be6:	2115      	movs	r1, #21
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f7ff ff3f 	bl	8000a6c <u8g2_font_get_word>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	82da      	strh	r2, [r3, #22]
#endif
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7b1b      	ldrb	r3, [r3, #12]
 8000c0e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	fa42 f303 	asr.w	r3, r2, r3
 8000c20:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8000c22:	7b7b      	ldrb	r3, [r7, #13]
 8000c24:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8000c26:	7bba      	ldrb	r2, [r7, #14]
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d91a      	bls.n	8000c6a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8000c38:	7b3a      	ldrb	r2, [r7, #12]
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	7b3b      	ldrb	r3, [r7, #12]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	3b08      	subs	r3, #8
 8000c68:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7bba      	ldrb	r2, [r7, #14]
 8000c84:	731a      	strb	r2, [r3, #12]
  return val;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffaa 	bl	8000bfe <u8g2_font_decode_get_unsigned_bits>
 8000caa:	4603      	mov	r3, r0
 8000cac:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8000cb8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	73fb      	strb	r3, [r7, #15]
  return v;
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8000cda:	b490      	push	{r4, r7}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4623      	mov	r3, r4
 8000cea:	80fb      	strh	r3, [r7, #6]
 8000cec:	4603      	mov	r3, r0
 8000cee:	717b      	strb	r3, [r7, #5]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	713b      	strb	r3, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d014      	beq.n	8000d28 <u8g2_add_vector_y+0x4e>
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	dc19      	bgt.n	8000d36 <u8g2_add_vector_y+0x5c>
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <u8g2_add_vector_y+0x32>
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d007      	beq.n	8000d1a <u8g2_add_vector_y+0x40>
 8000d0a:	e014      	b.n	8000d36 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8000d0c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4413      	add	r3, r2
 8000d16:	80fb      	strh	r3, [r7, #6]
      break;
 8000d18:	e014      	b.n	8000d44 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8000d1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4413      	add	r3, r2
 8000d24:	80fb      	strh	r3, [r7, #6]
      break;
 8000d26:	e00d      	b.n	8000d44 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8000d28:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	80fb      	strh	r3, [r7, #6]
      break;
 8000d34:	e006      	b.n	8000d44 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8000d36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	88fa      	ldrh	r2, [r7, #6]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	80fb      	strh	r3, [r7, #6]
      break;      
 8000d42:	bf00      	nop
  }
  return dy;
 8000d44:	88fb      	ldrh	r3, [r7, #6]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc90      	pop	{r4, r7}
 8000d4e:	4770      	bx	lr

08000d50 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8000d50:	b490      	push	{r4, r7}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4604      	mov	r4, r0
 8000d58:	4608      	mov	r0, r1
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4623      	mov	r3, r4
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	4603      	mov	r3, r0
 8000d64:	717b      	strb	r3, [r7, #5]
 8000d66:	460b      	mov	r3, r1
 8000d68:	713b      	strb	r3, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d014      	beq.n	8000d9e <u8g2_add_vector_x+0x4e>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	dc19      	bgt.n	8000dac <u8g2_add_vector_x+0x5c>
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <u8g2_add_vector_x+0x32>
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d007      	beq.n	8000d90 <u8g2_add_vector_x+0x40>
 8000d80:	e014      	b.n	8000dac <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8000d82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	80fb      	strh	r3, [r7, #6]
      break;
 8000d8e:	e014      	b.n	8000dba <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8000d90:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	88fa      	ldrh	r2, [r7, #6]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	80fb      	strh	r3, [r7, #6]
      break;
 8000d9c:	e00d      	b.n	8000dba <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8000d9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	88fa      	ldrh	r2, [r7, #6]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	80fb      	strh	r3, [r7, #6]
      break;
 8000daa:	e006      	b.n	8000dba <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8000dac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	4413      	add	r3, r2
 8000db6:	80fb      	strh	r3, [r7, #6]
      break;      
 8000db8:	bf00      	nop
  }
  return dx;
 8000dba:	88fb      	ldrh	r3, [r7, #6]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc90      	pop	{r4, r7}
 8000dc4:	4770      	bx	lr

08000dc6 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b088      	sub	sp, #32
 8000dca:	af02      	add	r7, sp, #8
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	70fb      	strb	r3, [r7, #3]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3360      	adds	r3, #96	; 0x60
 8000dda:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000de6:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000dee:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000df6:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	7d7b      	ldrb	r3, [r7, #21]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8000e04:	7dfa      	ldrb	r2, [r7, #23]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d201      	bcs.n	8000e10 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	88db      	ldrh	r3, [r3, #6]
 8000e1a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8000e1c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000e20:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	7c1b      	ldrb	r3, [r3, #16]
 8000e28:	89b8      	ldrh	r0, [r7, #12]
 8000e2a:	f7ff ff91 	bl	8000d50 <u8g2_add_vector_x>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8000e32:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8000e36:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	7c1b      	ldrb	r3, [r3, #16]
 8000e3e:	8978      	ldrh	r0, [r7, #10]
 8000e40:	f7ff ff4b 	bl	8000cda <u8g2_add_vector_y>
 8000e44:	4603      	mov	r3, r0
 8000e46:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8000e48:	78bb      	ldrb	r3, [r7, #2]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d010      	beq.n	8000e70 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	7b9a      	ldrb	r2, [r3, #14]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8000e58:	7dbb      	ldrb	r3, [r7, #22]
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	7c1b      	ldrb	r3, [r3, #16]
 8000e60:	897a      	ldrh	r2, [r7, #10]
 8000e62:	89b9      	ldrh	r1, [r7, #12]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4603      	mov	r3, r0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fc30 	bl	80016ce <u8g2_DrawHVLine>
 8000e6e:	e013      	b.n	8000e98 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	7b5b      	ldrb	r3, [r3, #13]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10f      	bne.n	8000e98 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	7bda      	ldrb	r2, [r3, #15]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8000e82:	7dbb      	ldrb	r3, [r7, #22]
 8000e84:	b298      	uxth	r0, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	7c1b      	ldrb	r3, [r3, #16]
 8000e8a:	897a      	ldrh	r2, [r7, #10]
 8000e8c:	89b9      	ldrh	r1, [r7, #12]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4603      	mov	r3, r0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 fc1b 	bl	80016ce <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8000e98:	7dfa      	ldrb	r2, [r7, #23]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d309      	bcc.n	8000eb4 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8000ea0:	7dfa      	ldrb	r2, [r7, #23]
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	757b      	strb	r3, [r7, #21]
    ly++;
 8000eac:	7d3b      	ldrb	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8000eb2:	e79d      	b.n	8000df0 <u8g2_font_decode_len+0x2a>
      break;
 8000eb4:	bf00      	nop
  }
  lx += cnt;
 8000eb6:	7d7a      	ldrb	r2, [r7, #21]
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	4413      	add	r3, r2
 8000ebc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8000ebe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8000ec6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	725a      	strb	r2, [r3, #9]
  
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3360      	adds	r3, #96	; 0x60
 8000ee4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000ef8:	4619      	mov	r1, r3
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f7ff fe7f 	bl	8000bfe <u8g2_font_decode_get_unsigned_bits>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b25a      	sxtb	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000f0e:	4619      	mov	r1, r3
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fe74 	bl	8000bfe <u8g2_font_decode_get_unsigned_bits>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b25a      	sxtb	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	7b9b      	ldrb	r3, [r3, #14]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf0c      	ite	eq
 8000f30:	2301      	moveq	r3, #1
 8000f32:	2300      	movne	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	73da      	strb	r2, [r3, #15]
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3360      	adds	r3, #96	; 0x60
 8000f52:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8000f54:	6839      	ldr	r1, [r7, #0]
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffbd 	bl	8000ed6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8000f62:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f7ff fe91 	bl	8000c94 <u8g2_font_decode_get_signed_bits>
 8000f72:	4603      	mov	r3, r0
 8000f74:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff fe88 	bl	8000c94 <u8g2_font_decode_get_signed_bits>
 8000f84:	4603      	mov	r3, r0
 8000f86:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f7ff fe7f 	bl	8000c94 <u8g2_font_decode_get_signed_bits>
 8000f96:	4603      	mov	r3, r0
 8000f98:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f340 80d7 	ble.w	8001154 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	8898      	ldrh	r0, [r3, #4]
 8000faa:	7cfa      	ldrb	r2, [r7, #19]
 8000fac:	7c7b      	ldrb	r3, [r7, #17]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	7c1b      	ldrb	r3, [r3, #16]
 8000fbc:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000fc0:	f7ff fec6 	bl	8000d50 <u8g2_add_vector_x>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	88d8      	ldrh	r0, [r3, #6]
 8000fd0:	7cfa      	ldrb	r2, [r7, #19]
 8000fd2:	7c7b      	ldrb	r3, [r7, #17]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	425b      	negs	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	b25a      	sxtb	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	7c1b      	ldrb	r3, [r3, #16]
 8000fe2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8000fe6:	f7ff fe78 	bl	8000cda <u8g2_add_vector_y>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	889b      	ldrh	r3, [r3, #4]
 8000ff6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	88db      	ldrh	r3, [r3, #6]
 8000ffc:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8000ffe:	8bfb      	ldrh	r3, [r7, #30]
 8001000:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001002:	8b7b      	ldrh	r3, [r7, #26]
 8001004:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	7c1b      	ldrb	r3, [r3, #16]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d85a      	bhi.n	80010c4 <u8g2_font_decode_glyph+0x180>
 800100e:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <u8g2_font_decode_glyph+0xd0>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	08001025 	.word	0x08001025
 8001018:	08001041 	.word	0x08001041
 800101c:	08001069 	.word	0x08001069
 8001020:	0800109d 	.word	0x0800109d
      {
	case 0:
	    x1 += decode->glyph_width;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800102a:	b29a      	uxth	r2, r3
 800102c:	8bbb      	ldrh	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001032:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001036:	b29a      	uxth	r2, r3
 8001038:	8b3b      	ldrh	r3, [r7, #24]
 800103a:	4413      	add	r3, r2
 800103c:	833b      	strh	r3, [r7, #24]
	    break;
 800103e:	e041      	b.n	80010c4 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001040:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001044:	b29b      	uxth	r3, r3
 8001046:	8bfa      	ldrh	r2, [r7, #30]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800104c:	8bfb      	ldrh	r3, [r7, #30]
 800104e:	3301      	adds	r3, #1
 8001050:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001052:	8bbb      	ldrh	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800105e:	b29a      	uxth	r2, r3
 8001060:	8b3b      	ldrh	r3, [r7, #24]
 8001062:	4413      	add	r3, r2
 8001064:	833b      	strh	r3, [r7, #24]
	    break;
 8001066:	e02d      	b.n	80010c4 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800106e:	b29b      	uxth	r3, r3
 8001070:	8bfa      	ldrh	r2, [r7, #30]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001076:	8bfb      	ldrh	r3, [r7, #30]
 8001078:	3301      	adds	r3, #1
 800107a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800107c:	8bbb      	ldrh	r3, [r7, #28]
 800107e:	3301      	adds	r3, #1
 8001080:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001082:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001086:	b29b      	uxth	r3, r3
 8001088:	8b7a      	ldrh	r2, [r7, #26]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800108e:	8b7b      	ldrh	r3, [r7, #26]
 8001090:	3301      	adds	r3, #1
 8001092:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001094:	8b3b      	ldrh	r3, [r7, #24]
 8001096:	3301      	adds	r3, #1
 8001098:	833b      	strh	r3, [r7, #24]
	    break;	  
 800109a:	e013      	b.n	80010c4 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800109c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	8bbb      	ldrh	r3, [r7, #28]
 80010a4:	4413      	add	r3, r2
 80010a6:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	8b7a      	ldrh	r2, [r7, #26]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80010b6:	8b7b      	ldrh	r3, [r7, #26]
 80010b8:	3301      	adds	r3, #1
 80010ba:	837b      	strh	r3, [r7, #26]
	    y1++;
 80010bc:	8b3b      	ldrh	r3, [r7, #24]
 80010be:	3301      	adds	r3, #1
 80010c0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80010c2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80010c4:	8bb8      	ldrh	r0, [r7, #28]
 80010c6:	8b7a      	ldrh	r2, [r7, #26]
 80010c8:	8bf9      	ldrh	r1, [r7, #30]
 80010ca:	8b3b      	ldrh	r3, [r7, #24]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	4603      	mov	r3, r0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fbd1 	bl	8001878 <u8g2_IsIntersection>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <u8g2_font_decode_glyph+0x19e>
	return d;
 80010dc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80010e0:	e03a      	b.n	8001158 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2200      	movs	r2, #0
 80010e6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2200      	movs	r2, #0
 80010ec:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80010f4:	4619      	mov	r1, r3
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff fd81 	bl	8000bfe <u8g2_font_decode_get_unsigned_bits>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001106:	4619      	mov	r1, r3
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff fd78 	bl	8000bfe <u8g2_font_decode_get_unsigned_bits>
 800110e:	4603      	mov	r3, r0
 8001110:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fe54 	bl	8000dc6 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fe4e 	bl	8000dc6 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800112a:	2101      	movs	r1, #1
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff fd66 	bl	8000bfe <u8g2_font_decode_get_unsigned_bits>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ec      	bne.n	8001112 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800113e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001142:	429a      	cmp	r2, r3
 8001144:	dd00      	ble.n	8001148 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001146:	e7d2      	b.n	80010ee <u8g2_font_decode_glyph+0x1aa>
	break;
 8001148:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	7b9a      	ldrb	r2, [r3, #14]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001154:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3317      	adds	r3, #23
 8001176:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d82a      	bhi.n	80011d4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	2b60      	cmp	r3, #96	; 0x60
 8001182:	d907      	bls.n	8001194 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800118a:	461a      	mov	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4413      	add	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	e009      	b.n	80011a8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	2b40      	cmp	r3, #64	; 0x40
 8001198:	d906      	bls.n	80011a8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80011a0:	461a      	mov	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4413      	add	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d04e      	beq.n	8001250 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d102      	bne.n	80011c4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3302      	adds	r3, #2
 80011c2:	e049      	b.n	8001258 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80011d2:	e7e9      	b.n	80011a8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80011da:	461a      	mov	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	6938      	ldr	r0, [r7, #16]
 80011ea:	f7ff fc3f 	bl	8000a6c <u8g2_font_get_word>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80011f8:	2102      	movs	r1, #2
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f7ff fc36 	bl	8000a6c <u8g2_font_get_word>
 8001200:	4603      	mov	r3, r0
 8001202:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	3304      	adds	r3, #4
 8001208:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800120a:	89fa      	ldrh	r2, [r7, #14]
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3e9      	bcc.n	80011e6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	4313      	orrs	r3, r2
 800122a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d010      	beq.n	8001254 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001232:	89fa      	ldrh	r2, [r7, #14]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	429a      	cmp	r2, r3
 8001238:	d102      	bne.n	8001240 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3303      	adds	r3, #3
 800123e:	e00b      	b.n	8001258 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3302      	adds	r3, #2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4413      	add	r3, r2
 800124c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800124e:	e7e0      	b.n	8001212 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001250:	bf00      	nop
 8001252:	e000      	b.n	8001256 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001254:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4603      	mov	r3, r0
 8001270:	817b      	strh	r3, [r7, #10]
 8001272:	460b      	mov	r3, r1
 8001274:	813b      	strh	r3, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	897a      	ldrh	r2, [r7, #10]
 8001282:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	893a      	ldrh	r2, [r7, #8]
 800128a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	4619      	mov	r1, r3
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ff64 	bl	8001160 <u8g2_font_get_glyph_data>
 8001298:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fe4e 	bl	8000f44 <u8g2_font_decode_glyph>
 80012a8:	4603      	mov	r3, r0
 80012aa:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80012ac:	8afb      	ldrh	r3, [r7, #22]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	78fa      	ldrb	r2, [r7, #3]
 80012c6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	817b      	strh	r3, [r7, #10]
 80012ea:	460b      	mov	r3, r1
 80012ec:	813b      	strh	r3, [r7, #8]
 80012ee:	4613      	mov	r3, r2
 80012f0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d833      	bhi.n	8001364 <u8g2_DrawGlyph+0x8c>
 80012fc:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <u8g2_DrawGlyph+0x2c>)
 80012fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001302:	bf00      	nop
 8001304:	08001315 	.word	0x08001315
 8001308:	08001329 	.word	0x08001329
 800130c:	0800133d 	.word	0x0800133d
 8001310:	08001351 	.word	0x08001351
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	4798      	blx	r3
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	893b      	ldrh	r3, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	813b      	strh	r3, [r7, #8]
      break;
 8001326:	e01d      	b.n	8001364 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	4798      	blx	r3
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	817b      	strh	r3, [r7, #10]
      break;
 800133a:	e013      	b.n	8001364 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	4798      	blx	r3
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	893b      	ldrh	r3, [r7, #8]
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	813b      	strh	r3, [r7, #8]
      break;
 800134e:	e009      	b.n	8001364 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	4798      	blx	r3
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	4413      	add	r3, r2
 8001360:	817b      	strh	r3, [r7, #10]
      break;
 8001362:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	893a      	ldrh	r2, [r7, #8]
 8001368:	8979      	ldrh	r1, [r7, #10]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff ff78 	bl	8001260 <u8g2_font_draw_glyph>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop

0800137c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	817b      	strh	r3, [r7, #10]
 800138a:	4613      	mov	r3, r2
 800138c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fcdd 	bl	8001d4e <u8x8_utf8_init>
  sum = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	4611      	mov	r1, r2
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	4798      	blx	r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80013aa:	8abb      	ldrh	r3, [r7, #20]
 80013ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d038      	beq.n	8001426 <u8g2_draw_string+0xaa>
      break;
    str++;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3301      	adds	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80013ba:	8abb      	ldrh	r3, [r7, #20]
 80013bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d0e9      	beq.n	8001398 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80013c4:	8abb      	ldrh	r3, [r7, #20]
 80013c6:	893a      	ldrh	r2, [r7, #8]
 80013c8:	8979      	ldrh	r1, [r7, #10]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ff84 	bl	80012d8 <u8g2_DrawGlyph>
 80013d0:	4603      	mov	r3, r0
 80013d2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d81e      	bhi.n	800141c <u8g2_draw_string+0xa0>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <u8g2_draw_string+0x68>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	080013ff 	.word	0x080013ff
 80013ec:	08001409 	.word	0x08001409
 80013f0:	08001413 	.word	0x08001413
      {
	case 0:
	  x += delta;
 80013f4:	897a      	ldrh	r2, [r7, #10]
 80013f6:	8a7b      	ldrh	r3, [r7, #18]
 80013f8:	4413      	add	r3, r2
 80013fa:	817b      	strh	r3, [r7, #10]
	  break;
 80013fc:	e00e      	b.n	800141c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80013fe:	893a      	ldrh	r2, [r7, #8]
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	4413      	add	r3, r2
 8001404:	813b      	strh	r3, [r7, #8]
	  break;
 8001406:	e009      	b.n	800141c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001408:	897a      	ldrh	r2, [r7, #10]
 800140a:	8a7b      	ldrh	r3, [r7, #18]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	817b      	strh	r3, [r7, #10]
	  break;
 8001410:	e004      	b.n	800141c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001412:	893a      	ldrh	r2, [r7, #8]
 8001414:	8a7b      	ldrh	r3, [r7, #18]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	813b      	strh	r3, [r7, #8]
	  break;
 800141a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800141c:	8afa      	ldrh	r2, [r7, #22]
 800141e:	8a7b      	ldrh	r3, [r7, #18]
 8001420:	4413      	add	r3, r2
 8001422:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001424:	e7b8      	b.n	8001398 <u8g2_draw_string+0x1c>
      break;
 8001426:	bf00      	nop
    }
  }
  return sum;
 8001428:	8afb      	ldrh	r3, [r7, #22]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop

08001434 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	817b      	strh	r3, [r7, #10]
 8001442:	4613      	mov	r3, r2
 8001444:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <u8g2_DrawStr+0x30>)
 800144a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800144c:	893a      	ldrh	r2, [r7, #8]
 800144e:	8979      	ldrh	r1, [r7, #10]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff ff92 	bl	800137c <u8g2_draw_string>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	08001d6b 	.word	0x08001d6b

08001468 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05d      	beq.n	8001534 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001496:	2b00      	cmp	r3, #0
 8001498:	d04d      	beq.n	8001536 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d11c      	bne.n	80014de <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80014b0:	429a      	cmp	r2, r3
 80014b2:	da05      	bge.n	80014c0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dd32      	ble.n	8001536 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80014dc:	e02b      	b.n	8001536 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80014e4:	461a      	mov	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80014ec:	4619      	mov	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80014f4:	440b      	add	r3, r1
 80014f6:	429a      	cmp	r2, r3
 80014f8:	da0d      	bge.n	8001516 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001500:	b2da      	uxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4413      	add	r3, r2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b25a      	sxtb	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001522:	429a      	cmp	r2, r3
 8001524:	dd07      	ble.n	8001536 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001532:	e000      	b.n	8001536 <u8g2_UpdateRefHeight+0xce>
    return;
 8001534:	bf00      	nop
  }  
}
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <u8g2_SetFontPosBaseline+0x1c>)
 8001564:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08001541 	.word	0x08001541

08001578 <u8g2_font_calc_vref_top>:
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001586:	81fb      	strh	r3, [r7, #14]
  tmp++;
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	3301      	adds	r3, #1
 800158c:	81fb      	strh	r3, [r7, #14]
  return tmp;
 800158e:	89fb      	ldrh	r3, [r7, #14]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <u8g2_SetFontPosTop+0x1c>)
 80015a8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	08001579 	.word	0x08001579

080015bc <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d00b      	beq.n	80015e8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3374      	adds	r3, #116	; 0x74
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fa65 	bl	8000aac <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff40 	bl	8001468 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	460b      	mov	r3, r1
 8001600:	80fb      	strh	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 800160c:	8afb      	ldrh	r3, [r7, #22]
 800160e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	8abb      	ldrh	r3, [r7, #20]
 8001616:	4413      	add	r3, r2
 8001618:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800161a:	8afa      	ldrh	r2, [r7, #22]
 800161c:	8abb      	ldrh	r3, [r7, #20]
 800161e:	429a      	cmp	r2, r3
 8001620:	d90b      	bls.n	800163a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001622:	8afa      	ldrh	r2, [r7, #22]
 8001624:	88bb      	ldrh	r3, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d205      	bcs.n	8001636 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800162a:	88bb      	ldrh	r3, [r7, #4]
 800162c:	82bb      	strh	r3, [r7, #20]
      b--;
 800162e:	8abb      	ldrh	r3, [r7, #20]
 8001630:	3b01      	subs	r3, #1
 8001632:	82bb      	strh	r3, [r7, #20]
 8001634:	e001      	b.n	800163a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800163a:	8afa      	ldrh	r2, [r7, #22]
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	d301      	bcc.n	8001646 <u8g2_clip_intersection2+0x56>
    return 0;
 8001642:	2300      	movs	r3, #0
 8001644:	e01c      	b.n	8001680 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001646:	8aba      	ldrh	r2, [r7, #20]
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	429a      	cmp	r2, r3
 800164c:	d801      	bhi.n	8001652 <u8g2_clip_intersection2+0x62>
    return 0;
 800164e:	2300      	movs	r3, #0
 8001650:	e016      	b.n	8001680 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001652:	8afa      	ldrh	r2, [r7, #22]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	429a      	cmp	r2, r3
 8001658:	d201      	bcs.n	800165e <u8g2_clip_intersection2+0x6e>
    a = c;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800165e:	8aba      	ldrh	r2, [r7, #20]
 8001660:	88bb      	ldrh	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d901      	bls.n	800166a <u8g2_clip_intersection2+0x7a>
    b = d;
 8001666:	88bb      	ldrh	r3, [r7, #4]
 8001668:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8afa      	ldrh	r2, [r7, #22]
 800166e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001670:	8aba      	ldrh	r2, [r7, #20]
 8001672:	8afb      	ldrh	r3, [r7, #22]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	8aba      	ldrh	r2, [r7, #20]
 800167c:	801a      	strh	r2, [r3, #0]
  return 1;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b087      	sub	sp, #28
 8001690:	af02      	add	r7, sp, #8
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	817b      	strh	r3, [r7, #10]
 800169e:	460b      	mov	r3, r1
 80016a0:	813b      	strh	r3, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016aa:	893a      	ldrh	r2, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80016b4:	88f8      	ldrh	r0, [r7, #6]
 80016b6:	893a      	ldrh	r2, [r7, #8]
 80016b8:	8979      	ldrh	r1, [r7, #10]
 80016ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4603      	mov	r3, r0
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	47a0      	blx	r4
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}

080016ce <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80016ce:	b590      	push	{r4, r7, lr}
 80016d0:	b087      	sub	sp, #28
 80016d2:	af02      	add	r7, sp, #8
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	4608      	mov	r0, r1
 80016d8:	4611      	mov	r1, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	817b      	strh	r3, [r7, #10]
 80016e0:	460b      	mov	r3, r1
 80016e2:	813b      	strh	r3, [r7, #8]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d075      	beq.n	80017de <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d072      	beq.n	80017de <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d91a      	bls.n	8001734 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80016fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d109      	bne.n	800171a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001706:	897a      	ldrh	r2, [r7, #10]
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	b29b      	uxth	r3, r3
 800170e:	817b      	strh	r3, [r7, #10]
	  x++;
 8001710:	897b      	ldrh	r3, [r7, #10]
 8001712:	3301      	adds	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	e00c      	b.n	8001734 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800171a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d108      	bne.n	8001734 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001722:	893a      	ldrh	r2, [r7, #8]
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b29b      	uxth	r3, r3
 800172a:	813b      	strh	r3, [r7, #8]
	  y++;
 800172c:	893b      	ldrh	r3, [r7, #8]
 800172e:	3301      	adds	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001734:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001740:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11a      	bne.n	800177e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800174e:	893b      	ldrh	r3, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d83b      	bhi.n	80017cc <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800175a:	893b      	ldrh	r3, [r7, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	d937      	bls.n	80017d0 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800176c:	1db9      	adds	r1, r7, #6
 800176e:	f107 000a 	add.w	r0, r7, #10
 8001772:	f7ff ff3d 	bl	80015f0 <u8g2_clip_intersection2>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <u8g2_DrawHVLine+0xe4>
	  return;
 800177c:	e02f      	b.n	80017de <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001784:	897b      	ldrh	r3, [r7, #10]
 8001786:	429a      	cmp	r2, r3
 8001788:	d824      	bhi.n	80017d4 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	429a      	cmp	r2, r3
 8001794:	d920      	bls.n	80017d8 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80017a2:	1db9      	adds	r1, r7, #6
 80017a4:	f107 0008 	add.w	r0, r7, #8
 80017a8:	f7ff ff22 	bl	80015f0 <u8g2_clip_intersection2>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d014      	beq.n	80017dc <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	689c      	ldr	r4, [r3, #8]
 80017b8:	8979      	ldrh	r1, [r7, #10]
 80017ba:	893a      	ldrh	r2, [r7, #8]
 80017bc:	88f8      	ldrh	r0, [r7, #6]
 80017be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4603      	mov	r3, r0
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	47a0      	blx	r4
 80017ca:	e008      	b.n	80017de <u8g2_DrawHVLine+0x110>
	  return;
 80017cc:	bf00      	nop
 80017ce:	e006      	b.n	80017de <u8g2_DrawHVLine+0x110>
	  return;
 80017d0:	bf00      	nop
 80017d2:	e004      	b.n	80017de <u8g2_DrawHVLine+0x110>
	  return;
 80017d4:	bf00      	nop
 80017d6:	e002      	b.n	80017de <u8g2_DrawHVLine+0x110>
	  return;
 80017d8:	bf00      	nop
 80017da:	e000      	b.n	80017de <u8g2_DrawHVLine+0x110>
	  return;
 80017dc:	bf00      	nop
    }
}
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}

080017e4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d903      	bls.n	8001806 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001812:	b490      	push	{r4, r7}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4604      	mov	r4, r0
 800181a:	4608      	mov	r0, r1
 800181c:	4611      	mov	r1, r2
 800181e:	461a      	mov	r2, r3
 8001820:	4623      	mov	r3, r4
 8001822:	80fb      	strh	r3, [r7, #6]
 8001824:	4603      	mov	r3, r0
 8001826:	80bb      	strh	r3, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d20d      	bcs.n	8001854 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001838:	883a      	ldrh	r2, [r7, #0]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	d901      	bls.n	8001844 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001840:	2301      	movs	r3, #1
 8001842:	e014      	b.n	800186e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	883b      	ldrh	r3, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d901      	bls.n	8001850 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800184c:	2301      	movs	r3, #1
 800184e:	e00e      	b.n	800186e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001850:	2300      	movs	r3, #0
 8001852:	e00c      	b.n	800186e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001854:	883a      	ldrh	r2, [r7, #0]
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	429a      	cmp	r2, r3
 800185a:	d907      	bls.n	800186c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	883b      	ldrh	r3, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d901      	bls.n	8001868 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001864:	2301      	movs	r3, #1
 8001866:	e002      	b.n	800186e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001868:	2300      	movs	r3, #0
 800186a:	e000      	b.n	800186e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800186c:	2300      	movs	r3, #0
    }
  }
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bc90      	pop	{r4, r7}
 8001876:	4770      	bx	lr

08001878 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4603      	mov	r3, r0
 8001888:	817b      	strh	r3, [r7, #10]
 800188a:	460b      	mov	r3, r1
 800188c:	813b      	strh	r3, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800189e:	8b3b      	ldrh	r3, [r7, #24]
 80018a0:	893a      	ldrh	r2, [r7, #8]
 80018a2:	f7ff ffb6 	bl	8001812 <u8g2_is_intersection_decision_tree>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <u8g2_IsIntersection+0x38>
    return 0; 
 80018ac:	2300      	movs	r3, #0
 80018ae:	e00a      	b.n	80018c6 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	897a      	ldrh	r2, [r7, #10]
 80018c0:	f7ff ffa7 	bl	8001812 <u8g2_is_intersection_decision_tree>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b089      	sub	sp, #36	; 0x24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	4608      	mov	r0, r1
 80018d8:	4611      	mov	r1, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	4603      	mov	r3, r0
 80018de:	817b      	strh	r3, [r7, #10]
 80018e0:	460b      	mov	r3, r1
 80018e2:	813b      	strh	r3, [r7, #8]
 80018e4:	4613      	mov	r3, r2
 80018e6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80018e8:	893b      	ldrh	r3, [r7, #8]
 80018ea:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80018ec:	7efb      	ldrb	r3, [r7, #27]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80018f8:	7e3a      	ldrb	r2, [r7, #24]
 80018fa:	7efb      	ldrb	r3, [r7, #27]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001910:	2b01      	cmp	r3, #1
 8001912:	d801      	bhi.n	8001918 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001914:	7e3b      	ldrb	r3, [r7, #24]
 8001916:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001922:	7e3b      	ldrb	r3, [r7, #24]
 8001924:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001926:	893b      	ldrh	r3, [r7, #8]
 8001928:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800192a:	8afb      	ldrh	r3, [r7, #22]
 800192c:	f023 0307 	bic.w	r3, r3, #7
 8001930:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	7c1b      	ldrb	r3, [r3, #16]
 8001938:	b29b      	uxth	r3, r3
 800193a:	8afa      	ldrh	r2, [r7, #22]
 800193c:	fb12 f303 	smulbb	r3, r2, r3
 8001940:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001948:	8afb      	ldrh	r3, [r7, #22]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001958:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d117      	bne.n	8001990 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	7ebb      	ldrb	r3, [r7, #26]
 8001966:	4313      	orrs	r3, r2
 8001968:	b2da      	uxtb	r2, r3
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	7e7b      	ldrb	r3, [r7, #25]
 8001974:	4053      	eors	r3, r2
 8001976:	b2da      	uxtb	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	3301      	adds	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
	len--;
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	3b01      	subs	r3, #1
 8001986:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1e8      	bne.n	8001960 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800198e:	e038      	b.n	8001a02 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	7ebb      	ldrb	r3, [r7, #26]
 8001996:	4313      	orrs	r3, r2
 8001998:	b2da      	uxtb	r2, r3
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	7e7b      	ldrb	r3, [r7, #25]
 80019a4:	4053      	eors	r3, r2
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80019ac:	7efb      	ldrb	r3, [r7, #27]
 80019ae:	3301      	adds	r3, #1
 80019b0:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80019b2:	7efb      	ldrb	r3, [r7, #27]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	76fb      	strb	r3, [r7, #27]
      len--;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	3b01      	subs	r3, #1
 80019be:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80019c0:	7efb      	ldrb	r3, [r7, #27]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d114      	bne.n	80019f0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80019ca:	461a      	mov	r2, r3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d801      	bhi.n	80019e0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d008      	beq.n	80019fc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	767b      	strb	r3, [r7, #25]
 80019ee:	e005      	b.n	80019fc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80019f0:	7ebb      	ldrb	r3, [r7, #26]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80019f6:	7e7b      	ldrb	r3, [r7, #25]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1c6      	bne.n	8001990 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001a02:	bf00      	nop
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff ffad 	bl	8001a0e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fd4f 	bl	8001558 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ade:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001ae0:	89fb      	ldrh	r3, [r7, #14]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	89fa      	ldrh	r2, [r7, #14]
 8001aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	7c1b      	ldrb	r3, [r3, #16]
 8001af0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	89fa      	ldrh	r2, [r7, #14]
 8001afc:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b04:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	89fa      	ldrh	r2, [r7, #14]
 8001b10:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b18:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8001b22:	4413      	add	r3, r2
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	7c52      	ldrb	r2, [r2, #17]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	dd08      	ble.n	8001b3e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	7c5b      	ldrb	r3, [r3, #17]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8001b60:	89fb      	ldrh	r3, [r7, #14]
 8001b62:	4413      	add	r3, r2
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	8a9a      	ldrh	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	8ada      	ldrh	r2, [r3, #22]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fe61 	bl	8001878 <u8g2_IsIntersection>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8001bc4:	e03b      	b.n	8001c3e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d205      	bcs.n	8001bea <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d905      	bls.n	8001c06 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d205      	bcs.n	8001c22 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d905      	bls.n	8001c3e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff3b 	bl	8001aca <u8g2_update_dimension_common>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d30a      	bcc.n	8001ca6 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff65 	bl	8001b8c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b088      	sub	sp, #32
 8001cce:	af02      	add	r7, sp, #8
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	817b      	strh	r3, [r7, #10]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	813b      	strh	r3, [r7, #8]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001cea:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8001cec:	8aba      	ldrh	r2, [r7, #20]
 8001cee:	893b      	ldrh	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfa:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8001cfc:	8afa      	ldrh	r2, [r7, #22]
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8001d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8001d0c:	8abb      	ldrh	r3, [r7, #20]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8001d12:	8afa      	ldrh	r2, [r7, #22]
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	82fb      	strh	r3, [r7, #22]
 8001d1a:	e00a      	b.n	8001d32 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8001d1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8001d24:	8afb      	ldrh	r3, [r7, #22]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8001d2a:	8aba      	ldrh	r2, [r7, #20]
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8001d32:	88f8      	ldrh	r0, [r7, #6]
 8001d34:	8aba      	ldrh	r2, [r7, #20]
 8001d36:	8af9      	ldrh	r1, [r7, #22]
 8001d38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f7ff fca3 	bl	800168c <u8g2_draw_hv_line_2dir>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <u8x8_ascii_next+0x18>
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b0a      	cmp	r3, #10
 8001d80:	d102      	bne.n	8001d88 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8001d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d86:	e001      	b.n	8001d8c <u8x8_ascii_next+0x22>
  return b;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	b29b      	uxth	r3, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691c      	ldr	r4, [r3, #16]
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	2300      	movs	r3, #0
 8001dac:	2120      	movs	r1, #32
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	47a0      	blx	r4
 8001db2:	4603      	mov	r3, r0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd90      	pop	{r4, r7, pc}

08001dbc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691c      	ldr	r4, [r3, #16]
 8001dce:	7afa      	ldrb	r2, [r7, #11]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2117      	movs	r1, #23
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	47a0      	blx	r4
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd90      	pop	{r4, r7, pc}

08001de2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8001dee:	1cfb      	adds	r3, r7, #3
 8001df0:	461a      	mov	r2, r3
 8001df2:	2101      	movs	r1, #1
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe1 	bl	8001dbc <u8x8_byte_SendBytes>
 8001dfa:	4603      	mov	r3, r0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68dc      	ldr	r4, [r3, #12]
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	2300      	movs	r3, #0
 8001e18:	2115      	movs	r1, #21
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	47a0      	blx	r4
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68dc      	ldr	r4, [r3, #12]
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2116      	movs	r1, #22
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	47a0      	blx	r4
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}

08001e4c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	460b      	mov	r3, r1
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	68dc      	ldr	r4, [r3, #12]
 8001e5e:	7afa      	ldrb	r2, [r7, #11]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2117      	movs	r1, #23
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	47a0      	blx	r4
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8001e72:	b590      	push	{r4, r7, lr}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68dc      	ldr	r4, [r3, #12]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2200      	movs	r2, #0
 8001e82:	2118      	movs	r1, #24
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	47a0      	blx	r4
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}

08001e92 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8001e92:	b590      	push	{r4, r7, lr}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68dc      	ldr	r4, [r3, #12]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2119      	movs	r1, #25
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	47a0      	blx	r4
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}

08001eb2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8001eb2:	b590      	push	{r4, r7, lr}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	73fb      	strb	r3, [r7, #15]
    data++;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2bfe      	cmp	r3, #254	; 0xfe
 8001ecc:	d031      	beq.n	8001f32 <u8x8_cad_SendSequence+0x80>
 8001ece:	2bfe      	cmp	r3, #254	; 0xfe
 8001ed0:	dc3d      	bgt.n	8001f4e <u8x8_cad_SendSequence+0x9c>
 8001ed2:	2b19      	cmp	r3, #25
 8001ed4:	dc3b      	bgt.n	8001f4e <u8x8_cad_SendSequence+0x9c>
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	da23      	bge.n	8001f22 <u8x8_cad_SendSequence+0x70>
 8001eda:	2b16      	cmp	r3, #22
 8001edc:	dc02      	bgt.n	8001ee4 <u8x8_cad_SendSequence+0x32>
 8001ede:	2b15      	cmp	r3, #21
 8001ee0:	da03      	bge.n	8001eea <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8001ee2:	e034      	b.n	8001f4e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8001ee4:	2b17      	cmp	r3, #23
 8001ee6:	d00e      	beq.n	8001f06 <u8x8_cad_SendSequence+0x54>
	return;
 8001ee8:	e031      	b.n	8001f4e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68dc      	ldr	r4, [r3, #12]
 8001ef4:	7bba      	ldrb	r2, [r7, #14]
 8001ef6:	7bf9      	ldrb	r1, [r7, #15]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	47a0      	blx	r4
	  data++;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	603b      	str	r3, [r7, #0]
	  break;
 8001f04:	e022      	b.n	8001f4c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8001f0c:	f107 030e 	add.w	r3, r7, #14
 8001f10:	461a      	mov	r2, r3
 8001f12:	2101      	movs	r1, #1
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff99 	bl	8001e4c <u8x8_cad_SendData>
	  data++;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	603b      	str	r3, [r7, #0]
	  break;
 8001f20:	e014      	b.n	8001f4c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68dc      	ldr	r4, [r3, #12]
 8001f26:	7bf9      	ldrb	r1, [r7, #15]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	47a0      	blx	r4
	  break;
 8001f30:	e00c      	b.n	8001f4c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2129      	movs	r1, #41	; 0x29
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fa3b 	bl	80023ba <u8x8_gpio_call>
	  data++;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
	  break;
 8001f4a:	bf00      	nop
    cmd = *data;
 8001f4c:	e7b6      	b.n	8001ebc <u8x8_cad_SendSequence+0xa>
	return;
 8001f4e:	bf00      	nop
    }
  }
}
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
	...

08001f58 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	72fb      	strb	r3, [r7, #11]
 8001f66:	4613      	mov	r3, r2
 8001f68:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
 8001f6c:	3b14      	subs	r3, #20
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d82f      	bhi.n	8001fd2 <u8x8_cad_011+0x7a>
 8001f72:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <u8x8_cad_011+0x20>)
 8001f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f78:	08001fc1 	.word	0x08001fc1
 8001f7c:	08001f91 	.word	0x08001f91
 8001f80:	08001fa5 	.word	0x08001fa5
 8001f84:	08001fb9 	.word	0x08001fb9
 8001f88:	08001fc1 	.word	0x08001fc1
 8001f8c:	08001fc1 	.word	0x08001fc1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8001f90:	2100      	movs	r1, #0
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ff00 	bl	8001d98 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001f98:	7abb      	ldrb	r3, [r7, #10]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff ff20 	bl	8001de2 <u8x8_byte_SendByte>
      break;
 8001fa2:	e018      	b.n	8001fd6 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff fef6 	bl	8001d98 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8001fac:	7abb      	ldrb	r3, [r7, #10]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff ff16 	bl	8001de2 <u8x8_byte_SendByte>
      break;
 8001fb6:	e00e      	b.n	8001fd6 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff feec 	bl	8001d98 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691c      	ldr	r4, [r3, #16]
 8001fc4:	7aba      	ldrb	r2, [r7, #10]
 8001fc6:	7af9      	ldrb	r1, [r7, #11]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	47a0      	blx	r4
 8001fce:	4603      	mov	r3, r0
 8001fd0:	e002      	b.n	8001fd8 <u8x8_cad_011+0x80>
    default:
      return 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <u8x8_cad_011+0x80>
  }
  return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}

08001fe0 <u8x8_ssd1322_8to32>:
*/

static uint8_t u8x8_ssd1322_to32_dest_buf[32];

static uint8_t *u8x8_ssd1322_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 8001fea:	2300      	movs	r3, #0
 8001fec:	74fb      	strb	r3, [r7, #19]
 8001fee:	e03d      	b.n	800206c <u8x8_ssd1322_8to32+0x8c>
  {
    dest = u8x8_ssd1322_to32_dest_buf;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <u8x8_ssd1322_8to32+0xa0>)
 8001ff2:	60fb      	str	r3, [r7, #12]
    dest += j;
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	75bb      	strb	r3, [r7, #22]
    ptr++;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	603b      	str	r3, [r7, #0]
    b = *ptr;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	757b      	strb	r3, [r7, #21]
    ptr++;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 8002014:	2300      	movs	r3, #0
 8002016:	753b      	strb	r3, [r7, #20]
 8002018:	e022      	b.n	8002060 <u8x8_ssd1322_8to32+0x80>
    {
      v = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 800201e:	7dbb      	ldrb	r3, [r7, #22]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <u8x8_ssd1322_8to32+0x50>
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	f063 030f 	orn	r3, r3, #15
 800202e:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 8002030:	7d7b      	ldrb	r3, [r7, #21]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <u8x8_ssd1322_8to32+0x62>
 800203a:	7dfb      	ldrb	r3, [r7, #23]
 800203c:	f043 030f 	orr.w	r3, r3, #15
 8002040:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	7dfa      	ldrb	r2, [r7, #23]
 8002046:	701a      	strb	r2, [r3, #0]
      dest+=4;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3304      	adds	r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 800204e:	7dbb      	ldrb	r3, [r7, #22]
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 8002054:	7d7b      	ldrb	r3, [r7, #21]
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 800205a:	7d3b      	ldrb	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	753b      	strb	r3, [r7, #20]
 8002060:	7d3b      	ldrb	r3, [r7, #20]
 8002062:	2b07      	cmp	r3, #7
 8002064:	d9d9      	bls.n	800201a <u8x8_ssd1322_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	3301      	adds	r3, #1
 800206a:	74fb      	strb	r3, [r7, #19]
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d9be      	bls.n	8001ff0 <u8x8_ssd1322_8to32+0x10>
    }
  }
  
  return u8x8_ssd1322_to32_dest_buf;
 8002072:	4b03      	ldr	r3, [pc, #12]	; (8002080 <u8x8_ssd1322_8to32+0xa0>)
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000b48 	.word	0x20000b48

08002084 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	72fb      	strb	r3, [r7, #11]
 8002092:	4613      	mov	r3, r2
 8002094:	72bb      	strb	r3, [r7, #10]
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d024      	beq.n	80020e6 <u8x8_d_ssd1322_common+0x62>
 800209c:	2b0f      	cmp	r3, #15
 800209e:	f300 8081 	bgt.w	80021a4 <u8x8_d_ssd1322_common+0x120>
 80020a2:	2b0b      	cmp	r3, #11
 80020a4:	d002      	beq.n	80020ac <u8x8_d_ssd1322_common+0x28>
 80020a6:	2b0e      	cmp	r3, #14
 80020a8:	d00d      	beq.n	80020c6 <u8x8_d_ssd1322_common+0x42>
 80020aa:	e07b      	b.n	80021a4 <u8x8_d_ssd1322_common+0x120>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80020ac:	7abb      	ldrb	r3, [r7, #10]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d104      	bne.n	80020bc <u8x8_d_ssd1322_common+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 80020b2:	4940      	ldr	r1, [pc, #256]	; (80021b4 <u8x8_d_ssd1322_common+0x130>)
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fefc 	bl	8001eb2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
      break;
 80020ba:	e075      	b.n	80021a8 <u8x8_d_ssd1322_common+0x124>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 80020bc:	493e      	ldr	r1, [pc, #248]	; (80021b8 <u8x8_d_ssd1322_common+0x134>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff fef7 	bl	8001eb2 <u8x8_cad_SendSequence>
      break;
 80020c4:	e070      	b.n	80021a8 <u8x8_d_ssd1322_common+0x124>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f7ff fed3 	bl	8001e72 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 80020cc:	21c1      	movs	r1, #193	; 0xc1
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff fe98 	bl	8001e04 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 80020d4:	7abb      	ldrb	r3, [r7, #10]
 80020d6:	4619      	mov	r1, r3
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff fea5 	bl	8001e28 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fed7 	bl	8001e92 <u8x8_cad_EndTransfer>
      break;
 80020e4:	e060      	b.n	80021a8 <u8x8_d_ssd1322_common+0x124>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fec3 	bl	8001e72 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	795b      	ldrb	r3, [r3, #5]
 80020f0:	77fb      	strb	r3, [r7, #31]
      x *= 2;		// only every 4th col can be addressed
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	77fb      	strb	r3, [r7, #31]
      x += u8x8->x_offset;		
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	4413      	add	r3, r2
 8002102:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	799b      	ldrb	r3, [r3, #6]
 8002108:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	75fb      	strb	r3, [r7, #23]
    
      
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8002110:	2175      	movs	r1, #117	; 0x75
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff fe76 	bl	8001e04 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	4619      	mov	r1, r3
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fe83 	bl	8001e28 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	3307      	adds	r3, #7
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4619      	mov	r1, r3
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff fe7c 	bl	8001e28 <u8x8_cad_SendArg>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	791b      	ldrb	r3, [r3, #4]
 8002134:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 800213c:	2115      	movs	r1, #21
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff fe60 	bl	8001e04 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 8002144:	7ffb      	ldrb	r3, [r7, #31]
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fe6d 	bl	8001e28 <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	3301      	adds	r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4619      	mov	r1, r3
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff fe66 	bl	8001e28 <u8x8_cad_SendArg>

	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 800215c:	215c      	movs	r1, #92	; 0x5c
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff fe50 	bl	8001e04 <u8x8_cad_SendCmd>
	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f7ff ff3a 	bl	8001fe0 <u8x8_ssd1322_8to32>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	2120      	movs	r1, #32
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff fe6a 	bl	8001e4c <u8x8_cad_SendData>
	  
	  ptr += 8;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3308      	adds	r3, #8
 800217c:	61bb      	str	r3, [r7, #24]
	  x += 2;
 800217e:	7ffb      	ldrb	r3, [r7, #31]
 8002180:	3302      	adds	r3, #2
 8002182:	77fb      	strb	r3, [r7, #31]
	  c--;
 8002184:	7fbb      	ldrb	r3, [r7, #30]
 8002186:	3b01      	subs	r3, #1
 8002188:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 800218a:	7fbb      	ldrb	r3, [r7, #30]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1d5      	bne.n	800213c <u8x8_d_ssd1322_common+0xb8>
	
	//x += 2;
	arg_int--;
 8002190:	7abb      	ldrb	r3, [r7, #10]
 8002192:	3b01      	subs	r3, #1
 8002194:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002196:	7abb      	ldrb	r3, [r7, #10]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1c9      	bne.n	8002130 <u8x8_d_ssd1322_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff fe78 	bl	8001e92 <u8x8_cad_EndTransfer>
      break;
 80021a2:	e001      	b.n	80021a8 <u8x8_d_ssd1322_common+0x124>
    default:
      return 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <u8x8_d_ssd1322_common+0x126>
  }
  return 1;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08004f8c 	.word	0x08004f8c
 80021b8:	08004f94 	.word	0x08004f94

080021bc <u8x8_d_ssd1322_nhd_256x64>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	72fb      	strb	r3, [r7, #11]
 80021ca:	4613      	mov	r3, r2
 80021cc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	2b0d      	cmp	r3, #13
 80021d2:	d013      	beq.n	80021fc <u8x8_d_ssd1322_nhd_256x64+0x40>
 80021d4:	2b0d      	cmp	r3, #13
 80021d6:	dc2a      	bgt.n	800222e <u8x8_d_ssd1322_nhd_256x64+0x72>
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d002      	beq.n	80021e2 <u8x8_d_ssd1322_nhd_256x64+0x26>
 80021dc:	2b0a      	cmp	r3, #10
 80021de:	d005      	beq.n	80021ec <u8x8_d_ssd1322_nhd_256x64+0x30>
 80021e0:	e025      	b.n	800222e <u8x8_d_ssd1322_nhd_256x64+0x72>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 80021e2:	4919      	ldr	r1, [pc, #100]	; (8002248 <u8x8_d_ssd1322_nhd_256x64+0x8c>)
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f837 	bl	8002258 <u8x8_d_helper_display_setup_memory>
      break;
 80021ea:	e028      	b.n	800223e <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f847 	bl	8002280 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 80021f2:	4916      	ldr	r1, [pc, #88]	; (800224c <u8x8_d_ssd1322_nhd_256x64+0x90>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff fe5c 	bl	8001eb2 <u8x8_cad_SendSequence>
      break;
 80021fa:	e020      	b.n	800223e <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80021fc:	7abb      	ldrb	r3, [r7, #10]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <u8x8_d_ssd1322_nhd_256x64+0x5c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 8002202:	4913      	ldr	r1, [pc, #76]	; (8002250 <u8x8_d_ssd1322_nhd_256x64+0x94>)
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fe54 	bl	8001eb2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	7c9a      	ldrb	r2, [r3, #18]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002216:	e012      	b.n	800223e <u8x8_d_ssd1322_nhd_256x64+0x82>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 8002218:	490e      	ldr	r1, [pc, #56]	; (8002254 <u8x8_d_ssd1322_nhd_256x64+0x98>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff fe49 	bl	8001eb2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	7cda      	ldrb	r2, [r3, #19]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800222c:	e007      	b.n	800223e <u8x8_d_ssd1322_nhd_256x64+0x82>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 800222e:	7aba      	ldrb	r2, [r7, #10]
 8002230:	7af9      	ldrb	r1, [r7, #11]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff ff25 	bl	8002084 <u8x8_d_ssd1322_common>
 800223a:	4603      	mov	r3, r0
 800223c:	e000      	b.n	8002240 <u8x8_d_ssd1322_nhd_256x64+0x84>
  }
  return 1;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08004fb4 	.word	0x08004fb4
 800224c:	08004fcc 	.word	0x08004fcc
 8002250:	08004f9c 	.word	0x08004f9c
 8002254:	08004fa8 	.word	0x08004fa8

08002258 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	7c9a      	ldrb	r2, [r3, #18]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695c      	ldr	r4, [r3, #20]
 800228c:	2300      	movs	r3, #0
 800228e:	2200      	movs	r2, #0
 8002290:	2128      	movs	r1, #40	; 0x28
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68dc      	ldr	r4, [r3, #12]
 800229a:	2300      	movs	r3, #0
 800229c:	2200      	movs	r2, #0
 800229e:	2114      	movs	r1, #20
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80022a4:	2201      	movs	r2, #1
 80022a6:	214b      	movs	r1, #75	; 0x4b
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f886 	bl	80023ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	791b      	ldrb	r3, [r3, #4]
 80022b4:	461a      	mov	r2, r3
 80022b6:	2129      	movs	r1, #41	; 0x29
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f87e 	bl	80023ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	214b      	movs	r1, #75	; 0x4b
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f879 	bl	80023ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	791b      	ldrb	r3, [r3, #4]
 80022ce:	461a      	mov	r2, r3
 80022d0:	2129      	movs	r1, #41	; 0x29
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f871 	bl	80023ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80022d8:	2201      	movs	r2, #1
 80022da:	214b      	movs	r1, #75	; 0x4b
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f86c 	bl	80023ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	795b      	ldrb	r3, [r3, #5]
 80022e8:	461a      	mov	r2, r3
 80022ea:	2129      	movs	r1, #41	; 0x29
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f864 	bl	80023ba <u8x8_gpio_call>
}    
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd90      	pop	{r4, r7, pc}

080022fa <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	4608      	mov	r0, r1
 8002304:	4611      	mov	r1, r2
 8002306:	461a      	mov	r2, r3
 8002308:	4603      	mov	r3, r0
 800230a:	70fb      	strb	r3, [r7, #3]
 800230c:	460b      	mov	r3, r1
 800230e:	70bb      	strb	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002318:	78bb      	ldrb	r3, [r7, #2]
 800231a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689c      	ldr	r4, [r3, #8]
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	2201      	movs	r2, #1
 800232e:	210f      	movs	r1, #15
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	47a0      	blx	r4
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}

0800233e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800233e:	b590      	push	{r4, r7, lr}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689c      	ldr	r4, [r3, #8]
 800234a:	2300      	movs	r3, #0
 800234c:	2200      	movs	r2, #0
 800234e:	2109      	movs	r1, #9
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	47a0      	blx	r4
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}

0800235c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689c      	ldr	r4, [r3, #8]
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	210a      	movs	r1, #10
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bd90      	pop	{r4, r7, pc}

0800237a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800237a:	b590      	push	{r4, r7, lr}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	460b      	mov	r3, r1
 8002384:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689c      	ldr	r4, [r3, #8]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	2300      	movs	r3, #0
 800238e:	210b      	movs	r1, #11
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	47a0      	blx	r4
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689c      	ldr	r4, [r3, #8]
 80023a8:	2300      	movs	r3, #0
 80023aa:	2200      	movs	r2, #0
 80023ac:	2110      	movs	r1, #16
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	47a0      	blx	r4
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}

080023ba <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80023ba:	b590      	push	{r4, r7, lr}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70fb      	strb	r3, [r7, #3]
 80023c6:	4613      	mov	r3, r2
 80023c8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695c      	ldr	r4, [r3, #20]
 80023ce:	78ba      	ldrb	r2, [r7, #2]
 80023d0:	78f9      	ldrb	r1, [r7, #3]
 80023d2:	2300      	movs	r3, #0
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	47a0      	blx	r4
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}

080023e0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	72fb      	strb	r3, [r7, #11]
 80023ee:	4613      	mov	r3, r2
 80023f0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <u8x8_SetupDefaults+0x58>)
 8002412:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <u8x8_SetupDefaults+0x58>)
 8002418:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <u8x8_SetupDefaults+0x58>)
 800241e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <u8x8_SetupDefaults+0x58>)
 8002424:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	22ff      	movs	r2, #255	; 0xff
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	22ff      	movs	r2, #255	; 0xff
 8002448:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	080023e1 	.word	0x080023e1

0800245c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff ffc8 	bl	8002400 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff ff58 	bl	800233e <u8x8_SetupMemory>
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <LoopForever+0xe>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b4:	4c0b      	ldr	r4, [pc, #44]	; (80024e4 <LoopForever+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024c2:	f7fe f953 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c6:	f002 f8e9 	bl	800469c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ca:	f7fd ffad 	bl	8000428 <main>

080024ce <LoopForever>:

LoopForever:
    b LoopForever
 80024ce:	e7fe      	b.n	80024ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80024dc:	08005048 	.word	0x08005048
  ldr r2, =_sbss
 80024e0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80024e4:	20000b6c 	.word	0x20000b6c

080024e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC1_2_IRQHandler>
	...

080024ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_Init+0x28>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a07      	ldr	r2, [pc, #28]	; (8002514 <HAL_Init+0x28>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fc:	2003      	movs	r0, #3
 80024fe:	f000 f931 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002502:	200f      	movs	r0, #15
 8002504:	f000 f808 	bl	8002518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002508:	f7fe f8a0 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_InitTick+0x54>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_InitTick+0x58>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f93b 	bl	80027b2 <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d80a      	bhi.n	8002562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002554:	f000 f911 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <HAL_InitTick+0x5c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000000 	.word	0x20000000
 8002570:	20000008 	.word	0x20000008
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000008 	.word	0x20000008
 800259c:	20000b68 	.word	0x20000b68

080025a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000b68 	.word	0x20000b68

080025b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	; (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	; (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff47 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff5c 	bl	8002648 <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffb0 	bl	8002720 <SysTick_Config>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027da:	e154      	b.n	8002a86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2101      	movs	r1, #1
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8146 	beq.w	8002a80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d005      	beq.n	800280c <HAL_GPIO_Init+0x40>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d130      	bne.n	800286e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002842:	2201      	movs	r2, #1
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4013      	ands	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 0201 	and.w	r2, r3, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b03      	cmp	r3, #3
 8002878:	d017      	beq.n	80028aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d123      	bne.n	80028fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	08da      	lsrs	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3208      	adds	r2, #8
 80028be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	220f      	movs	r2, #15
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	6939      	ldr	r1, [r7, #16]
 80028fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0203 	and.w	r2, r3, #3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80a0 	beq.w	8002a80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_GPIO_Init+0x2d8>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a57      	ldr	r2, [pc, #348]	; (8002aa4 <HAL_GPIO_Init+0x2d8>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_GPIO_Init+0x2d8>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002958:	4a53      	ldr	r2, [pc, #332]	; (8002aa8 <HAL_GPIO_Init+0x2dc>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002982:	d019      	beq.n	80029b8 <HAL_GPIO_Init+0x1ec>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a49      	ldr	r2, [pc, #292]	; (8002aac <HAL_GPIO_Init+0x2e0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d013      	beq.n	80029b4 <HAL_GPIO_Init+0x1e8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <HAL_GPIO_Init+0x2e4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00d      	beq.n	80029b0 <HAL_GPIO_Init+0x1e4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a47      	ldr	r2, [pc, #284]	; (8002ab4 <HAL_GPIO_Init+0x2e8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d007      	beq.n	80029ac <HAL_GPIO_Init+0x1e0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <HAL_GPIO_Init+0x2ec>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d101      	bne.n	80029a8 <HAL_GPIO_Init+0x1dc>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e008      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029a8:	2305      	movs	r3, #5
 80029aa:	e006      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e004      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e002      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_GPIO_Init+0x1ee>
 80029b8:	2300      	movs	r3, #0
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	f002 0203 	and.w	r2, r2, #3
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4093      	lsls	r3, r2
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ca:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_GPIO_Init+0x2dc>)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029fc:	4a2f      	ldr	r2, [pc, #188]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a02:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a26:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a50:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a56:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <HAL_GPIO_Init+0x2f0>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f aea3 	bne.w	80027dc <HAL_GPIO_Init+0x10>
  }
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000c00 	.word	0x48000c00
 8002ab8:	48001000 	.word	0x48001000
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
 8002acc:	4613      	mov	r3, r2
 8002ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad0:	787b      	ldrb	r3, [r7, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002adc:	e002      	b.n	8002ae4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f001 b823 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 817d 	beq.w	8002e26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b2c:	4bbc      	ldr	r3, [pc, #752]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d00c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b38:	4bb9      	ldr	r3, [pc, #740]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d15c      	bne.n	8002bfe <HAL_RCC_OscConfig+0x10e>
 8002b44:	4bb6      	ldr	r3, [pc, #728]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d155      	bne.n	8002bfe <HAL_RCC_OscConfig+0x10e>
 8002b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x94>
 8002b7e:	4ba8      	ldr	r3, [pc, #672]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e015      	b.n	8002bb0 <HAL_RCC_OscConfig+0xc0>
 8002b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ba0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002bac:	4b9c      	ldr	r3, [pc, #624]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bb8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bc4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 811f 	beq.w	8002e24 <HAL_RCC_OscConfig+0x334>
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8116 	bne.w	8002e24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f000 bfaf 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12e>
 8002c10:	4b83      	ldr	r3, [pc, #524]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a82      	ldr	r2, [pc, #520]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e036      	b.n	8002c8c <HAL_RCC_OscConfig+0x19c>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x158>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7b      	ldr	r2, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e021      	b.n	8002c8c <HAL_RCC_OscConfig+0x19c>
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x184>
 8002c5a:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a70      	ldr	r2, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6d      	ldr	r2, [pc, #436]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0x19c>
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a66      	ldr	r2, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c8c:	4b64      	ldr	r3, [pc, #400]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	f023 020f 	bic.w	r2, r3, #15
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	495f      	ldr	r1, [pc, #380]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d059      	beq.n	8002d6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fc73 	bl	80025a0 <HAL_GetTick>
 8002cba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fc6e 	bl	80025a0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d902      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f000 bf43 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 8002cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_OscConfig+0x218>
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	e015      	b.n	8002d34 <HAL_RCC_OscConfig+0x244>
 8002d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002d24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d30:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0ab      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x1d0>
 8002d68:	e05d      	b.n	8002e26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7ff fc19 	bl	80025a0 <HAL_GetTick>
 8002d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d74:	f7ff fc14 	bl	80025a0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d902      	bls.n	8002d8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	f000 bee9 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 8002d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2cc>
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	e015      	b.n	8002de8 <HAL_RCC_OscConfig+0x2f8>
 8002dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002dd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002de4:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_RCC_OscConfig+0x330>)
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002df0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002df4:	fa92 f2a2 	rbit	r2, r2
 8002df8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002dfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e00:	fab2 f282 	clz	r2, r2
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	f002 021f 	and.w	r2, r2, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f202 	lsl.w	r2, r1, r2
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ab      	bne.n	8002d74 <HAL_RCC_OscConfig+0x284>
 8002e1c:	e003      	b.n	8002e26 <HAL_RCC_OscConfig+0x336>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 817d 	beq.w	8003136 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e3c:	4ba6      	ldr	r3, [pc, #664]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e48:	4ba3      	ldr	r3, [pc, #652]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d172      	bne.n	8002f3a <HAL_RCC_OscConfig+0x44a>
 8002e54:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d16c      	bne.n	8002f3a <HAL_RCC_OscConfig+0x44a>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d102      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3a0>
 8002e8a:	4b93      	ldr	r3, [pc, #588]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	e013      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3c8>
 8002e90:	2302      	movs	r3, #2
 8002e92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ea8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ebe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002eca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCC_OscConfig+0x410>
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f000 be2e 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	21f8      	movs	r1, #248	; 0xf8
 8002f16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002f1e:	fa91 f1a1 	rbit	r1, r1
 8002f22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002f26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002f2a:	fab1 f181 	clz	r1, r1
 8002f2e:	b2c9      	uxtb	r1, r1
 8002f30:	408b      	lsls	r3, r1
 8002f32:	4969      	ldr	r1, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f38:	e0fd      	b.n	8003136 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8088 	beq.w	800305c <HAL_RCC_OscConfig+0x56c>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff fb12 	bl	80025a0 <HAL_GetTick>
 8002f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f82:	f7ff fb0d 	bl	80025a0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f000 bde2 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002faa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4d8>
 8002fc2:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	e013      	b.n	8002ff0 <HAL_RCC_OscConfig+0x500>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002fe0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ff6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002ffa:	fa92 f2a2 	rbit	r2, r2
 8002ffe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003002:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003006:	fab2 f282 	clz	r2, r2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f002 021f 	and.w	r2, r2, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f202 	lsl.w	r2, r1, r2
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0af      	beq.n	8002f82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	21f8      	movs	r1, #248	; 0xf8
 8003038:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003040:	fa91 f1a1 	rbit	r1, r1
 8003044:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003048:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800304c:	fab1 f181 	clz	r1, r1
 8003050:	b2c9      	uxtb	r1, r1
 8003052:	408b      	lsls	r3, r1
 8003054:	4920      	ldr	r1, [pc, #128]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
 800305a:	e06c      	b.n	8003136 <HAL_RCC_OscConfig+0x646>
 800305c:	2301      	movs	r3, #1
 800305e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800306e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800307c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fa8a 	bl	80025a0 <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7ff fa85 	bl	80025a0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	f000 bd5a 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80030ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d104      	bne.n	80030dc <HAL_RCC_OscConfig+0x5ec>
 80030d2:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCC_OscConfig+0x5e8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e015      	b.n	8003104 <HAL_RCC_OscConfig+0x614>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	2302      	movs	r3, #2
 80030de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030ee:	2302      	movs	r3, #2
 80030f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003100:	4bc8      	ldr	r3, [pc, #800]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2202      	movs	r2, #2
 8003106:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800310a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800310e:	fa92 f2a2 	rbit	r2, r2
 8003112:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003116:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f042 0220 	orr.w	r2, r2, #32
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f002 021f 	and.w	r2, r2, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1ad      	bne.n	8003092 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8110 	beq.w	800336c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d079      	beq.n	8003250 <HAL_RCC_OscConfig+0x760>
 800315c:	2301      	movs	r3, #1
 800315e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800316e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4bab      	ldr	r3, [pc, #684]	; (8003428 <HAL_RCC_OscConfig+0x938>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	2301      	movs	r3, #1
 8003184:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7ff fa0b 	bl	80025a0 <HAL_GetTick>
 800318a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003190:	f7ff fa06 	bl	80025a0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d902      	bls.n	80031a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f000 bcdb 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031c0:	2202      	movs	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031e4:	2202      	movs	r2, #2
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	fa93 f2a3 	rbit	r2, r3
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800320c:	2102      	movs	r1, #2
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	fa93 f1a3 	rbit	r1, r3
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003226:	6019      	str	r1, [r3, #0]
  return result;
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2101      	movs	r1, #1
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0a0      	beq.n	8003190 <HAL_RCC_OscConfig+0x6a0>
 800324e:	e08d      	b.n	800336c <HAL_RCC_OscConfig+0x87c>
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003272:	601a      	str	r2, [r3, #0]
  return result;
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800327c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_OscConfig+0x938>)
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	461a      	mov	r2, r3
 800328e:	2300      	movs	r3, #0
 8003290:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7ff f985 	bl	80025a0 <HAL_GetTick>
 8003296:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7ff f980 	bl	80025a0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	f000 bc55 	b.w	8003b5c <HAL_RCC_OscConfig+0x106c>
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f2a3 	rbit	r2, r3
 80032cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	fa93 f2a3 	rbit	r2, r3
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800331c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800332a:	2102      	movs	r1, #2
 800332c:	6019      	str	r1, [r3, #0]
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f1a3 	rbit	r1, r3
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003344:	6019      	str	r1, [r3, #0]
  return result;
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d197      	bne.n	800329c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 81a1 	beq.w	80036c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339e:	61d3      	str	r3, [r2, #28]
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80033ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7ff f8e1 	bl	80025a0 <HAL_GetTick>
 80033de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	e009      	b.n	80033f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7ff f8dc 	bl	80025a0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	; 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e3b1      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RCC_OscConfig+0x93c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_OscConfig+0x940>
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a02      	ldr	r2, [pc, #8]	; (8003424 <HAL_RCC_OscConfig+0x934>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e03c      	b.n	800349c <HAL_RCC_OscConfig+0x9ac>
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	10908120 	.word	0x10908120
 800342c:	40007000 	.word	0x40007000
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10c      	bne.n	800345a <HAL_RCC_OscConfig+0x96a>
 8003440:	4bc1      	ldr	r3, [pc, #772]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4ac0      	ldr	r2, [pc, #768]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	4bbe      	ldr	r3, [pc, #760]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4abd      	ldr	r2, [pc, #756]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6213      	str	r3, [r2, #32]
 8003458:	e020      	b.n	800349c <HAL_RCC_OscConfig+0x9ac>
 800345a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x994>
 800346a:	4bb7      	ldr	r3, [pc, #732]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4ab6      	ldr	r2, [pc, #728]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	4bb4      	ldr	r3, [pc, #720]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4ab3      	ldr	r2, [pc, #716]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6213      	str	r3, [r2, #32]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x9ac>
 8003484:	4bb0      	ldr	r3, [pc, #704]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4aaf      	ldr	r2, [pc, #700]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	4bad      	ldr	r3, [pc, #692]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4aac      	ldr	r2, [pc, #688]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8081 	beq.w	80035b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7ff f877 	bl	80025a0 <HAL_GetTick>
 80034b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7ff f872 	bl	80025a0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e345      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034d8:	2202      	movs	r2, #2
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80034fc:	2202      	movs	r2, #2
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	fa93 f2a3 	rbit	r2, r3
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003516:	601a      	str	r2, [r3, #0]
  return result;
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003520:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d102      	bne.n	800353c <HAL_RCC_OscConfig+0xa4c>
 8003536:	4b84      	ldr	r3, [pc, #528]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0xa74>
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003544:	2202      	movs	r2, #2
 8003546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	4b79      	ldr	r3, [pc, #484]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003568:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800356c:	2102      	movs	r1, #2
 800356e:	6011      	str	r1, [r2, #0]
 8003570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003574:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	fa92 f1a2 	rbit	r1, r2
 800357e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003582:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003586:	6011      	str	r1, [r2, #0]
  return result;
 8003588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	fab2 f282 	clz	r2, r2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f002 021f 	and.w	r2, r2, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d084      	beq.n	80034b8 <HAL_RCC_OscConfig+0x9c8>
 80035ae:	e07f      	b.n	80036b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fe fff6 	bl	80025a0 <HAL_GetTick>
 80035b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00b      	b.n	80035d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe fff1 	bl	80025a0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e2c4      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035fe:	2202      	movs	r2, #2
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	fa93 f2a3 	rbit	r2, r3
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003618:	601a      	str	r2, [r3, #0]
  return result;
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003622:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d102      	bne.n	800363e <HAL_RCC_OscConfig+0xb4e>
 8003638:	4b43      	ldr	r3, [pc, #268]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	e013      	b.n	8003666 <HAL_RCC_OscConfig+0xb76>
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800366a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800366e:	2102      	movs	r1, #2
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003676:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	fa92 f1a2 	rbit	r1, r2
 8003680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003684:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003688:	6011      	str	r1, [r2, #0]
  return result;
 800368a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800368e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d184      	bne.n	80035ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 80036be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8242 	beq.w	8003b5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <HAL_RCC_OscConfig+0xc58>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	f000 8213 	beq.w	8003b0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	f040 8162 	bne.w	80039ba <HAL_RCC_OscConfig+0xeca>
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80036fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800371a:	601a      	str	r2, [r3, #0]
  return result;
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003724:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe ff30 	bl	80025a0 <HAL_GetTick>
 8003740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	e00c      	b.n	8003760 <HAL_RCC_OscConfig+0xc70>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe ff28 	bl	80025a0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1fd      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800376c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	fa93 f2a3 	rbit	r2, r3
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003784:	601a      	str	r2, [r3, #0]
  return result;
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800378e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <HAL_RCC_OscConfig+0xcba>
 80037a4:	4bb0      	ldr	r3, [pc, #704]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	e027      	b.n	80037fa <HAL_RCC_OscConfig+0xd0a>
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b9c      	ldr	r3, [pc, #624]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003802:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003806:	6011      	str	r1, [r2, #0]
 8003808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	fa92 f1a2 	rbit	r1, r2
 8003816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800381a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800381e:	6011      	str	r1, [r2, #0]
  return result;
 8003820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003824:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	fab2 f282 	clz	r2, r2
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	f042 0220 	orr.w	r2, r2, #32
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	f002 021f 	and.w	r2, r2, #31
 800383a:	2101      	movs	r1, #1
 800383c:	fa01 f202 	lsl.w	r2, r1, r2
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d182      	bne.n	800374c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800385a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	430b      	orrs	r3, r1
 8003868:	497f      	ldr	r1, [pc, #508]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800387a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003880:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	fa93 f2a3 	rbit	r2, r3
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003892:	601a      	str	r2, [r3, #0]
  return result;
 8003894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003898:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800389c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	461a      	mov	r2, r3
 80038b0:	2301      	movs	r3, #1
 80038b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fe74 	bl	80025a0 <HAL_GetTick>
 80038b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038bc:	e009      	b.n	80038d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fe6f 	bl	80025a0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e144      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80038f6:	601a      	str	r2, [r3, #0]
  return result;
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_OscConfig+0xe2c>
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e027      	b.n	800396c <HAL_RCC_OscConfig+0xe7c>
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fa93 f2a3 	rbit	r2, r3
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800394a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003970:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800397e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fa92 f1a2 	rbit	r1, r2
 8003988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003990:	6011      	str	r1, [r2, #0]
  return result;
 8003992:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003996:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f042 0220 	orr.w	r2, r2, #32
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d082      	beq.n	80038be <HAL_RCC_OscConfig+0xdce>
 80039b8:	e0cf      	b.n	8003b5a <HAL_RCC_OscConfig+0x106a>
 80039ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	fa93 f2a3 	rbit	r2, r3
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039de:	601a      	str	r2, [r3, #0]
  return result;
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe fdce 	bl	80025a0 <HAL_GetTick>
 8003a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a08:	e009      	b.n	8003a1e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fe fdc9 	bl	80025a0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e09e      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	fa93 f2a3 	rbit	r2, r3
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a42:	601a      	str	r2, [r3, #0]
  return result;
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003a4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d104      	bne.n	8003a6c <HAL_RCC_OscConfig+0xf7c>
 8003a62:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <HAL_RCC_OscConfig+0xf78>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e029      	b.n	8003abc <HAL_RCC_OscConfig+0xfcc>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a70:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x1078>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ac4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ace:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	fa92 f1a2 	rbit	r1, r2
 8003ad8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003adc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ae0:	6011      	str	r1, [r2, #0]
  return result;
 8003ae2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f002 021f 	and.w	r2, r2, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d180      	bne.n	8003a0a <HAL_RCC_OscConfig+0xf1a>
 8003b08:	e027      	b.n	8003b5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e01e      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_OscConfig+0x1078>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000

08003b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b09e      	sub	sp, #120	; 0x78
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e162      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b90      	ldr	r3, [pc, #576]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d910      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	498b      	ldr	r1, [pc, #556]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e14a      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b82      	ldr	r3, [pc, #520]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	497f      	ldr	r1, [pc, #508]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80dc 	beq.w	8003d98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d13c      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xf6>
 8003be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xa6>
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	e00f      	b.n	8003c32 <HAL_RCC_ClockConfig+0xc6>
 8003c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c24:	663b      	str	r3, [r7, #96]	; 0x60
 8003c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c2e:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c36:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c3a:	fa92 f2a2 	rbit	r2, r2
 8003c3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003c40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c42:	fab2 f282 	clz	r2, r2
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	f002 021f 	and.w	r2, r2, #31
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d17b      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0f3      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d13c      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x178>
 8003c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x128>
 8003c8e:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e00f      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
 8003c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cbc:	fa92 f2a2 	rbit	r2, r2
 8003cc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f002 021f 	and.w	r2, r2, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d13a      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b2      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x1a0>
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e00d      	b.n	8003d28 <HAL_RCC_ClockConfig+0x1bc>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	2302      	movs	r3, #2
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2202      	movs	r2, #2
 8003d2a:	61ba      	str	r2, [r7, #24]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	fa92 f2a2 	rbit	r2, r2
 8003d32:	617a      	str	r2, [r7, #20]
  return result;
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	fab2 f282 	clz	r2, r2
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	f042 0220 	orr.w	r2, r2, #32
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f002 021f 	and.w	r2, r2, #31
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e079      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	491a      	ldr	r1, [pc, #104]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe fc1a 	bl	80025a0 <HAL_GetTick>
 8003d6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe fc16 	bl	80025a0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e061      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_ClockConfig+0x260>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d214      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e040      	b.n	8003e4a <HAL_RCC_ClockConfig+0x2de>
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	491a      	ldr	r1, [pc, #104]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4912      	ldr	r1, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e0e:	f000 f85b 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e12:	4601      	mov	r1, r0
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <HAL_RCC_ClockConfig+0x2e8>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	22f0      	movs	r2, #240	; 0xf0
 8003e1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	fa92 f2a2 	rbit	r2, r2
 8003e26:	60fa      	str	r2, [r7, #12]
  return result;
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	fab2 f282 	clz	r2, r2
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	40d3      	lsrs	r3, r2
 8003e32:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x2ec>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	fa21 f303 	lsr.w	r3, r1, r3
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <HAL_RCC_ClockConfig+0x2f0>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_RCC_ClockConfig+0x2f4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fb68 	bl	8002518 <HAL_InitTick>
  
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3778      	adds	r7, #120	; 0x78
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	0800471c 	.word	0x0800471c
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003e74:	2303      	movs	r3, #3
 8003e76:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8003e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e80:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_RCC_MCOConfig+0x60>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <HAL_RCC_MCOConfig+0x60>)
 8003e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e90:	6153      	str	r3, [r2, #20]
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RCC_MCOConfig+0x60>)
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea8:	f7fe fc90 	bl	80027cc <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_MCOConfig+0x60>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003eb4:	4903      	ldr	r1, [pc, #12]	; (8003ec4 <HAL_RCC_MCOConfig+0x60>)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
}
 8003ebc:	bf00      	nop
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b08b      	sub	sp, #44	; 0x2c
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ee2:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x36>
 8003ef6:	e03c      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003efa:	623b      	str	r3, [r7, #32]
      break;
 8003efc:	e03c      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	fa92 f2a2 	rbit	r2, r2
 8003f10:	607a      	str	r2, [r7, #4]
  return result;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	40d3      	lsrs	r3, r2
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f1e:	5cd3      	ldrb	r3, [r2, r3]
 8003f20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	fa92 f2a2 	rbit	r2, r2
 8003f34:	60fa      	str	r2, [r7, #12]
  return result;
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	fab2 f282 	clz	r2, r2
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	40d3      	lsrs	r3, r2
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f60:	e004      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	623b      	str	r3, [r7, #32]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f74:	623b      	str	r3, [r7, #32]
      break;
 8003f76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	372c      	adds	r7, #44	; 0x2c
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	08005020 	.word	0x08005020
 8003f94:	08005030 	.word	0x08005030
 8003f98:	003d0900 	.word	0x003d0900
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e09d      	b.n	80040ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d108      	bne.n	8003fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc2:	d009      	beq.n	8003fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	61da      	str	r2, [r3, #28]
 8003fca:	e005      	b.n	8003fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fb4e 	bl	8000694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004018:	d902      	bls.n	8004020 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e002      	b.n	8004026 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004024:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800402e:	d007      	beq.n	8004040 <HAL_SPI_Init+0xa0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004038:	d002      	beq.n	8004040 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	ea42 0103 	orr.w	r1, r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	f003 0204 	and.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_SPI_Transmit+0x22>
 8004114:	2302      	movs	r3, #2
 8004116:	e158      	b.n	80043ca <HAL_SPI_Transmit+0x2d4>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004120:	f7fe fa3e 	bl	80025a0 <HAL_GetTick>
 8004124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d002      	beq.n	800413c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004136:	2302      	movs	r3, #2
 8004138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800413a:	e13d      	b.n	80043b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_SPI_Transmit+0x52>
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800414c:	e134      	b.n	80043b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2203      	movs	r2, #3
 8004152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	88fa      	ldrh	r2, [r7, #6]
 8004166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004198:	d10f      	bne.n	80041ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d007      	beq.n	80041d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e0:	d94b      	bls.n	800427a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_SPI_Transmit+0xfa>
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d13e      	bne.n	800426e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004214:	e02b      	b.n	800426e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	d112      	bne.n	800424a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	1c9a      	adds	r2, r3, #2
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004248:	e011      	b.n	800426e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424a:	f7fe f9a9 	bl	80025a0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d803      	bhi.n	8004262 <HAL_SPI_Transmit+0x16c>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004260:	d102      	bne.n	8004268 <HAL_SPI_Transmit+0x172>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800426c:	e0a4      	b.n	80043b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ce      	bne.n	8004216 <HAL_SPI_Transmit+0x120>
 8004278:	e07c      	b.n	8004374 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_SPI_Transmit+0x192>
 8004282:	8afb      	ldrh	r3, [r7, #22]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d170      	bne.n	800436a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	d912      	bls.n	80042b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	881a      	ldrh	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	1c9a      	adds	r2, r3, #2
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b02      	subs	r3, #2
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042b6:	e058      	b.n	800436a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	7812      	ldrb	r2, [r2, #0]
 80042c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80042de:	e044      	b.n	800436a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d12b      	bne.n	8004346 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d912      	bls.n	800431e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b02      	subs	r3, #2
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800431c:	e025      	b.n	800436a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004344:	e011      	b.n	800436a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004346:	f7fe f92b 	bl	80025a0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d803      	bhi.n	800435e <HAL_SPI_Transmit+0x268>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800435c:	d102      	bne.n	8004364 <HAL_SPI_Transmit+0x26e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004368:	e026      	b.n	80043b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1b5      	bne.n	80042e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f949 	bl	8004610 <SPI_EndRxTxTransaction>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e000      	b.n	80043b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80043b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043e4:	f7fe f8dc 	bl	80025a0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	4413      	add	r3, r2
 80043f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043f4:	f7fe f8d4 	bl	80025a0 <HAL_GetTick>
 80043f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	015b      	lsls	r3, r3, #5
 8004400:	0d1b      	lsrs	r3, r3, #20
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800440a:	e054      	b.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004412:	d050      	beq.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004414:	f7fe f8c4 	bl	80025a0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	429a      	cmp	r2, r3
 8004422:	d902      	bls.n	800442a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d13d      	bne.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004442:	d111      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444c:	d004      	beq.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d107      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004470:	d10f      	bne.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e017      	b.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d19b      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000

080044e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044f6:	f7fe f853 	bl	80025a0 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	4413      	add	r3, r2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004506:	f7fe f84b 	bl	80025a0 <HAL_GetTick>
 800450a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004514:	4b3d      	ldr	r3, [pc, #244]	; (800460c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	00da      	lsls	r2, r3, #3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	0d1b      	lsrs	r3, r3, #20
 8004524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800452c:	e060      	b.n	80045f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004534:	d107      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004544:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800454c:	d050      	beq.n	80045f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800454e:	f7fe f827 	bl	80025a0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455a:	429a      	cmp	r2, r3
 800455c:	d902      	bls.n	8004564 <SPI_WaitFifoStateUntilTimeout+0x80>
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d13d      	bne.n	80045e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457c:	d111      	bne.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004586:	d004      	beq.n	8004592 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d107      	bne.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d10f      	bne.n	80045cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e010      	b.n	8004602 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d196      	bne.n	800452e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000000 	.word	0x20000000

08004610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff ff5b 	bl	80044e4 <SPI_WaitFifoStateUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e027      	b.n	8004694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2200      	movs	r2, #0
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fec0 	bl	80043d4 <SPI_WaitFlagStateUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e014      	b.n	8004694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff ff34 	bl	80044e4 <SPI_WaitFifoStateUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e000      	b.n	8004694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4d0d      	ldr	r5, [pc, #52]	; (80046d4 <__libc_init_array+0x38>)
 80046a0:	4c0d      	ldr	r4, [pc, #52]	; (80046d8 <__libc_init_array+0x3c>)
 80046a2:	1b64      	subs	r4, r4, r5
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	2600      	movs	r6, #0
 80046a8:	42a6      	cmp	r6, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	4d0b      	ldr	r5, [pc, #44]	; (80046dc <__libc_init_array+0x40>)
 80046ae:	4c0c      	ldr	r4, [pc, #48]	; (80046e0 <__libc_init_array+0x44>)
 80046b0:	f000 f820 	bl	80046f4 <_init>
 80046b4:	1b64      	subs	r4, r4, r5
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	2600      	movs	r6, #0
 80046ba:	42a6      	cmp	r6, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c4:	4798      	blx	r3
 80046c6:	3601      	adds	r6, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ce:	4798      	blx	r3
 80046d0:	3601      	adds	r6, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	08005040 	.word	0x08005040
 80046d8:	08005040 	.word	0x08005040
 80046dc:	08005040 	.word	0x08005040
 80046e0:	08005044 	.word	0x08005044

080046e4 <memset>:
 80046e4:	4402      	add	r2, r0
 80046e6:	4603      	mov	r3, r0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d100      	bne.n	80046ee <memset+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	f803 1b01 	strb.w	r1, [r3], #1
 80046f2:	e7f9      	b.n	80046e8 <memset+0x4>

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
